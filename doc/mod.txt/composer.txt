SYNOPSIS                   *composer*

     • Composer is a tool for dependency management in PHP. It allows you to declare the dependent libraries your project needs and it will install them in your project for you.

REQUIREMENTS                   *composer-requirements*

   The below requirements are needed on the host that executes this module.

     • php
     • composer installed in bin path (recommended /usr/local/bin)

PARAMETERS                   *composer-parameters*

         Parameter        Choices/Defaults                                                                          Comments
   apcu_autoloader          Choices:       Uses APCu to cache found/not-found classes
   boolean                  • no ←         aliases: apcu-autoloader
   added in 2.7             • yes
   arguments                               Composer arguments like required package, version and so on.
   -
   classmap_authoritative   Choices:       Autoload classes from classmap only.
   boolean                  • no ←         Implicitely enable optimize_autoloader.
   added in 2.7             • yes          Recommended especially for production, but can take a bit of time to run.
                                           aliases: classmap-authoritative
   command                Default:         Composer command like "install", "update" and so on.
   -                      "install"
   executable                              Path to PHP Executable on the remote host, if PHP is not in PATH.
   -                                       aliases: php_path
   added in 2.4
   global_command           Choices:       Runs the specified command globally.
   boolean                  • no ←         aliases: global-command
   added in 2.4             • yes
   ignore_platform_reqs     Choices:       Ignore php, hhvm, lib-" and ext-" requirements and force the installation even if the local machine does not fulfill these.
   boolean                  • no ←         aliases: ignore-platform-reqs
                            • yes
   no_dev                   Choices:       Disables installation of require-dev packages (see --no-dev).
   boolean                  • no           aliases: no-dev
                            • yes ←
   no_plugins               Choices:       Disables all plugins ( see --no-plugins ).
   boolean                  • no ←         aliases: no-plugins
                            • yes
   no_scripts               Choices:       Skips the execution of all scripts defined in composer.json (see --no-scripts).
   boolean                  • no ←         aliases: no-scripts
                            • yes
                            Choices:       Optimize autoloader during autoloader dump (see --optimize-autoloader).
   optimize_autoloader      • no           Convert PSR-0/4 autoloading to classmap to get a faster autoloader.
   boolean                  • yes ←        Recommended especially for production, but can take a bit of time to run.
                                           aliases: optimize-autoloader
   prefer_dist              Choices:       Forces installation from package dist even for dev versions (see --prefer-dist).
   boolean                  • no ←         aliases: prefer-dist
                            • yes
   prefer_source            Choices:       Forces installation from package sources when possible (see --prefer-source).
   boolean                  • no ←         aliases: prefer-source
                            • yes
   working_dir                             Directory of your project (see --working-dir). This is required when the command is not run globally.
   -                                       Will be ignored if global_command=true.
                                           aliases: working-dir

NOTES                   *composer-notes*

   Note

     • Default options that are always appended in each execution are –no-ansi, –no-interaction and –no-progress if available.
     • We received reports about issues on macOS if composer was installed by Homebrew. Please use the official install method to avoid issues.

EXAMPLES                   *composer-examples*

 # Downloads and installs all the libs and dependencies outlined in the /path/to/project/composer.lock
 - composer:
     command: install
     working_dir: /path/to/project

 - composer:
     command: require
     arguments: my/package
     working_dir: /path/to/project

 # Clone project and install with all dependencies
 - composer:
     command: create-project
     arguments: package/package /path/to/project ~1.0
     working_dir: /path/to/project
     prefer_dist: yes

 # Installs package globally
 - composer:
     command: require
     global_command: yes
     arguments: my/package

STATUS                   *composer-status*

     • This module is not guaranteed to have a backwards compatible interface. [preview]
     • This module is maintained by the Ansible Community. [community]

     • Dimitrios Tydeas Mengidis (@dmtrs)
     • René Moser (@resmo)

   Hint

   If you notice any issues in this documentation, you can edit this document to improve it.

   ══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

MORE INFO                          *composer-moreinfo*
>
All arguments are omni-completed, but if you really want to see the online docs:
https://docs.ansible.com/ansible/latest/modules/composer_module.html
