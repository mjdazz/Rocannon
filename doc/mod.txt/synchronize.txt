SYNOPSIS                   *synchronize*

     • synchronize is a wrapper around rsync to make common tasks in your playbooks quick and easy.
     • It is run and originates on the local host where Ansible is being run.
     • Of course, you could just use the command action to call rsync yourself, but you also have to add a fair number of boilerplate options and host facts.
     • This module is not intended to provide access to the full power of rsync, but does make the most common invocations easier to implement. You still may need to call rsync directly via command
       or shell depending on your use case.

PARAMETERS                   *synchronize-parameters*

      Parameter    Choices/Defaults                                                                             Comments
   archive           Choices:
   boolean           • no           Mirrors the rsync archive flag, enables recursive, links, perms, times, owner, group flags and -D.
                     • yes ←
   checksum          Choices:
   boolean           • no ←         Skip based on checksum, rather than mod-time & size; Note that that "archive" option is still enabled by default - the "checksum" option will not disable it.
                     • yes
   compress          Choices:       Compress file data during the transfer.
   boolean           • no           In most cases, leave this enabled unless it causes problems.
                     • yes ←
   copy_links        Choices:
   boolean           • no ←         Copy symlinks as the item that they point to (the referent) is copied, rather than the symlink.
                     • yes
   delete            Choices:       Delete files in dest that don't exist (after transfer, not before) in the src path.
   boolean           • no ←         This option requires recursive=yes.
                     • yes          This option ignores excluded files and behaves like the rsync opt --delete-excluded.
   dest                             Path on the destination host that will be synchronized from the source.
   string /                         The path can be absolute or relative.
   required
                                    Port number for ssh on the destination host.
   dest_port                        Prior to Ansible 2.0, the ansible_ssh_port inventory var took precedence over this value.
   integer                          This parameter defaults to the value of ansible_ssh_port or ansible_port, the remote_port config setting or the value from ssh client configuration if none of
                                    the former have been set.
   dirs              Choices:
   boolean           • no ←         Transfer directories without recursing.
                     • yes
   existing_only     Choices:
   boolean           • no ←         Skip creating new files on receiver.
                     • yes
   group             Choices:       Preserve group.
   boolean           • no           This parameter defaults to the value of the archive option.
                     • yes
   link_dest       Default:
   list            null             Add a destination to hard link against during the rsync.
   added in 2.5
   links             Choices:       Copy symlinks as symlinks.
   boolean           • no           This parameter defaults to the value of the archive option.
                     • yes
   mode              Choices:       Specify the direction of the synchronization.
   string            • pull         In push mode the localhost or delegate is the source.
                     • push ←       In pull mode the remote host in context is the source.
   owner             Choices:       Preserve owner (super user only).
   boolean           • no           This parameter defaults to the value of the archive option.
                     • yes
   partial           Choices:
   boolean           • no ←         Tells rsync to keep the partial file which should make a subsequent transfer of the rest of the file much faster.
                     • yes
   perms             Choices:       Preserve permissions.
   boolean           • no           This parameter defaults to the value of the archive option.
                     • yes
   private_key                      Specify the private key to use for SSH-based rsync connections (e.g. ~/.ssh/id_rsa).
   path
   recursive         Choices:       Recurse into directories.
   boolean           • no           This parameter defaults to the value of the archive option.
                     • yes
   rsync_opts      Default:         Specify additional rsync options by passing in an array.
   list            null             Note that an empty string in rsync_opts will end up transfer the current working directory.
   rsync_path                       Specify the rsync command to run on the remote host. See --rsync-path on the rsync man page.
   string                           To specify the rsync command to run on the local host, you need to set this your task var ansible_rsync_path.
   rsync_timeout   Default:         Specify a --timeout for the rsync command in seconds.
   integer         0
   set_remote_user   Choices:       Put [email protected] for the remote paths.
   boolean           • no           If you have a custom ssh config to define the remote user for a host that does not match the inventory user, you should set this parameter to no.
                     • yes ←
   src                              Path on the source host that will be synchronized to the destination.
   string /                         The path can be absolute or relative.
   required
   times             Choices:       Preserve modification times.
   boolean           • no           This parameter defaults to the value of the archive option.
                     • yes
   use_ssh_args      Choices:
   boolean           • no ←         Use the ssh_args specified in ansible.cfg.
                     • yes
   verify_host       Choices:
   boolean           • no ←         Verify destination host key.
                     • yes

NOTES                   *synchronize-notes*

   Note

     • rsync must be installed on both the local and remote host.
     • For the synchronize module, the “local host” is the host the synchronize task originates on, and the “destination host” is the host synchronize is connecting to.
     • The “local host” can be changed to a different host by using delegate_to. This enables copying between two remote hosts or entirely on one remote machine.
     • The user and permissions for the synchronize src are those of the user running the Ansible task on the local host (or the remote_user for a delegate_to host when delegate_to is used).
     • The user and permissions for the synchronize dest are those of the remote_user on the destination host or the become_user if become=yes is active.
     • In Ansible 2.0 a bug in the synchronize module made become occur on the “local host”. This was fixed in Ansible 2.0.1.
     • Currently, synchronize is limited to elevating permissions via passwordless sudo. This is because rsync itself is connecting to the remote machine and rsync doesn’t give us a way to pass
       sudo credentials in.
     • Currently there are only a few connection types which support synchronize (ssh, paramiko, local, and docker) because a sync strategy has been determined for those connection types. Note that
       the connection for these must not need a password as rsync itself is making the connection and rsync does not provide us a way to pass a password to the connection.
     • Expect that dest=~/x will be ~<remote_user>/x even if using sudo.
     • Inspect the verbose output to validate the destination user/host/path are what was expected.
     • To exclude files and directories from being synchronized, you may add .rsync-filter files to the source directory.
     • rsync daemon must be up and running with correct permission when using rsync protocol in source or destination path.
     • The synchronize module forces –delay-updates to avoid leaving a destination in a broken in-between state if the underlying rsync process encounters an error. Those synchronizing large
       numbers of files that are willing to trade safety for performance should call rsync directly.
     • link_destination is subject to the same limitations as the underlying rsync daemon. Hard links are only preserved if the relative subtrees of the source and destination are the same.
       Attempts to hardlink into a directory that is a subdirectory of the source will be prevented.

SEE ALSO                   *synchronize-see also*

   See also

   copy – Copy files to remote locations
   The official documentation on the copy module.

   win_robocopy – Synchronizes the contents of two directories using Robocopy
   The official documentation on the win_robocopy module.

EXAMPLES                   *synchronize-examples*

 - name: Synchronization of src on the control machine to dest on the remote hosts
   synchronize:
     src: some/relative/path
     dest: /some/absolute/path

 - name: Synchronization using rsync protocol (push)
   synchronize:
     src: some/relative/path/
     dest: rsync://somehost.com/path/

 - name: Synchronization using rsync protocol (pull)
   synchronize:
     mode: pull
     src: rsync://somehost.com/path/
     dest: /some/absolute/path/

 - name:  Synchronization using rsync protocol on delegate host (push)
   synchronize:
     src: /some/absolute/path/
     dest: rsync://somehost.com/path/
   delegate_to: delegate.host

 - name: Synchronization using rsync protocol on delegate host (pull)
   synchronize:
     mode: pull
     src: rsync://somehost.com/path/
     dest: /some/absolute/path/
   delegate_to: delegate.host

 - name: Synchronization without any --archive options enabled
   synchronize:
     src: some/relative/path
     dest: /some/absolute/path
     archive: no

 - name: Synchronization with --archive options enabled except for --recursive
   synchronize:
     src: some/relative/path
     dest: /some/absolute/path
     recursive: no

 - name: Synchronization with --archive options enabled except for --times, with --checksum option enabled
   synchronize:
     src: some/relative/path
     dest: /some/absolute/path
     checksum: yes
     times: no

 - name: Synchronization without --archive options enabled except use --links
   synchronize:
     src: some/relative/path
     dest: /some/absolute/path
     archive: no
     links: yes

 - name: Synchronization of two paths both on the control machine
   synchronize:
     src: some/relative/path
     dest: /some/absolute/path
   delegate_to: localhost

 - name: Synchronization of src on the inventory host to the dest on the localhost in pull mode
   synchronize:
     mode: pull
     src: some/relative/path
     dest: /some/absolute/path

 - name: Synchronization of src on delegate host to dest on the current inventory host.
   synchronize:
     src: /first/absolute/path
     dest: /second/absolute/path
   delegate_to: delegate.host

 - name: Synchronize two directories on one remote host.
   synchronize:
     src: /first/absolute/path
     dest: /second/absolute/path
   delegate_to: "{{ inventory_hostname }}"

 - name: Synchronize and delete files in dest on the remote host that are not found in src of localhost.
   synchronize:
     src: some/relative/path
     dest: /some/absolute/path
     delete: yes
     recursive: yes

 # This specific command is granted su privileges on the destination
 - name: Synchronize using an alternate rsync command
   synchronize:
     src: some/relative/path
     dest: /some/absolute/path
     rsync_path: su -c rsync

 # Example .rsync-filter file in the source directory
 # - var       # exclude any path whose last part is 'var'
 # - /var      # exclude any path starting with 'var' starting at the source directory
 # + /var/conf # include /var/conf even though it was previously excluded

 - name: Synchronize passing in extra rsync options
   synchronize:
     src: /tmp/helloworld
     dest: /var/www/helloworld
     rsync_opts:
       - "--no-motd"
       - "--exclude=.git"

 # Hardlink files if they didn't change
 - name: Use hardlinks when synchronizing filesystems
   synchronize:
     src: /tmp/path_a/foo.txt
     dest: /tmp/path_b/foo.txt
     link_dest: /tmp/path_a/

 # Specify the rsync binary to use on remote host and on local host
 - hosts: groupofhosts
   vars:
         ansible_rsync_path: /usr/gnu/bin/rsync

   tasks:
     - name: copy /tmp/localpath/ to remote location /tmp/remotepath
       synchronize:
         src: /tmp/localpath/
         dest: /tmp/remotepath
         rsync_path: /usr/gnu/bin/rsync

STATUS                   *synchronize-status*

     • This module is not guaranteed to have a backwards compatible interface. [preview]
     • This module is maintained by the Ansible Core Team. [core]

RED HAT SUPPORT                   *synchronize-red hat support*

     • Timothy Appnel (@tima)

   Hint

   If you notice any issues in this documentation, you can edit this document to improve it.

   ══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

MORE INFO                          *synchronize-moreinfo*
>
All arguments are omni-completed, but if you really want to see the online docs:
https://docs.ansible.com/ansible/latest/modules/synchronize_module.html
