SYNOPSIS                   *nxos_vrf*

     • This module provides declarative management of VRFs on CISCO NXOS network devices.

PARAMETERS                   *nxos_vrf-parameters*

         Parameter       Choices/Defaults                                                                          Comments
   admin_state             Choices:
   -                       • up ←         Administrative state of the VRF.
                           • down
   aggregate
   -                                      List of VRFs definitions.
   added in 2.5
   associated_interfaces                  This is a intent option and checks the operational state of the for given vrf name for associated interfaces. If the value in the associated_interfaces
   -                                      does not match with the operational state of vrf interfaces on device it will result in failure.
   added in 2.5
   delay                 Default:         Time in seconds to wait before checking for the operational state on remote device. This wait is applicable for operational state arguments.
   -                     10
   description                            Description of the VRF or keyword 'default'.
   -
   interfaces
   -                                      List of interfaces to check the VRF has been configured correctly or keyword 'default'.
   added in 2.5
   name                                   Name of VRF to be managed.
   - / required                           aliases: vrf
                                          Deprecated
                                          Starting with Ansible 2.5 we recommend using connection: network_cli.
                                          This option is only required if you are using NX-API.
   provider                               For more information please see the NXOS Platform Options guide.
   dictionary
                                          ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

                                          A dict object containing connection details.
      auth_pass                           Specifies the password to use if required to enter privileged mode on the remote device. If authorize is false, then this argument does nothing. If the
      string                              value is not specified in the task, the value of environment variable ANSIBLE_NET_AUTH_PASS will be used instead.
      added in 2.5.3
      authorize            Choices:       Instructs the module to enter privileged mode on the remote device before sending any commands. If not specified, the device will attempt to execute all
      boolean              • no ←         commands in non-privileged mode. If the value is not specified in the task, the value of environment variable ANSIBLE_NET_AUTHORIZE will be used instead.
      added in 2.5.3       • yes
      host                                Specifies the DNS host name or address for connecting to the remote device over the specified transport. The value of host is used as the destination
      string / required                   address for the transport.
      password                            Specifies the password to use to authenticate the connection to the remote device. This is a common argument used for either cli or nxapi transports. If
      string                              the value is not specified in the task, the value of environment variable ANSIBLE_NET_PASSWORD will be used instead.
      port               Default:         Specifies the port to use when building the connection to the remote device. This value applies to either cli or nxapi. The port value will default to the
      integer            "0 (use common   appropriate transport common port if none is provided in the task. (cli=22, http=80, https=443).
                         port)"
      ssh_keyfile                         Specifies the SSH key to use to authenticate the connection to the remote device. This argument is only used for the cli transport. If the value is not
      string                              specified in the task, the value of environment variable ANSIBLE_NET_SSH_KEYFILE will be used instead.
      timeout            Default:         Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands. If the timeout is exceeded before the
      integer            10               operation is completed, the module will error. NX-API can be slow to return on long-running commands (sh mac, sh bgp, etc).
      transport            Choices:       Configures the transport connection to use when connecting to the remote device. The transport argument supports connectivity to the device over cli (ssh)
      string / required    • cli ←        or nxapi.
                           • nxapi
      use_proxy            Choices:
      boolean              • no           If no, the environment variables http_proxy and https_proxy will be ignored.
      added in 2.5         • yes ←
      use_ssl              Choices:
      boolean              • no ←         Configures the transport to use SSL if set to yes only when the transport=nxapi, otherwise this value is ignored.
                           • yes
      username                            Configures the username to use to authenticate the connection to the remote device. This value is used to authenticate either the CLI login or the nxapi
      string                              authentication depending on which transport is used. If the value is not specified in the task, the value of environment variable ANSIBLE_NET_USERNAME will
                                          be used instead.
      validate_certs       Choices:       If no, SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates. If the transport
      boolean              • no           argument is not nxapi, this value is ignored.
                           • yes ←
   purge                   Choices:
   boolean                 • no ←         Purge VRFs not defined in the aggregate parameter.
   added in 2.5            • yes
   rd                                     VPN Route Distinguisher (RD). Valid values are a string in one of the route-distinguisher formats (ASN2:NN, ASN4:NN, or IPV4:NN); the keyword 'auto', or
   -                                      the keyword 'default'.
   state                   Choices:
   -                       • present ←    Manages desired state of the resource.
                           • absent
   vni                                    Specify virtual network identifier. Valid values are Integer or keyword 'default'.
   -

NOTES                   *nxos_vrf-notes*

   Note

     • Tested against NXOSv 7.3.(0)D1(1) on VIRL
     • Cisco NX-OS creates the default VRF by itself. Therefore, you’re not allowed to use default as vrf name in this module.
     • vrf name must be shorter than 32 chars.
     • VRF names are not case sensible in NX-OS. Anyway, the name is stored just like it’s inserted by the user and it’ll not be changed again unless the VRF is removed and re-created. i.e. vrf=NTC
       will create a VRF named NTC, but running it again with vrf=ntc will not cause a configuration change.
     • For information on using CLI and NX-API see the NXOS Platform Options guide
     • For more information on using Ansible to manage network devices see the Ansible Network Guide
     • For more information on using Ansible to manage Cisco devices see the Cisco integration page.

EXAMPLES                   *nxos_vrf-examples*

 - name: Ensure ntc VRF exists on switch
   nxos_vrf:
     name: ntc
     description: testing
     state: present

 - name: Aggregate definition of VRFs
   nxos_vrf:
     aggregate:
       - { name: test1, description: Testing, admin_state: down }
       - { name: test2, interfaces: Ethernet1/2 }

 - name: Aggregate definitions of VRFs with Purge
   nxos_vrf:
     aggregate:
       - { name: ntc1, description: purge test1 }
       - { name: ntc2, description: purge test2 }
     state: present
     purge: yes

 - name: Delete VRFs exist on switch
   nxos_vrf:
     aggregate:
       - { name: ntc1 }
       - { name: ntc2 }
     state: absent

 - name: Assign interfaces to VRF declaratively
   nxos_vrf:
     name: test1
     interfaces:
       - Ethernet2/3
       - Ethernet2/5

 - name: Check interfaces assigned to VRF
   nxos_vrf:
     name: test1
     associated_interfaces:
       - Ethernet2/3
       - Ethernet2/5

 - name: Ensure VRF is tagged with interface Ethernet2/5 only (Removes from Ethernet2/3)
   nxos_vrf:
     name: test1
     interfaces:
       - Ethernet2/5

 - name: Delete VRF
   nxos_vrf:
     name: ntc
     state: absent

RETURN VALUES                   *nxos_vrf-return values*

   Common return values are documented here, the following are the fields unique to this module:

     Key    Returned                                                                                   Description
   commands          commands sent to the device
   list     always   Sample:
                     ['vrf context ntc', 'no shutdown', 'interface Ethernet1/2', 'no switchport', 'vrf member test2']

STATUS                   *nxos_vrf-status*

     • This module is not guaranteed to have a backwards compatible interface. [preview]
     • This module is maintained by the Ansible Network Team. [network]

RED HAT SUPPORT                   *nxos_vrf-red hat support*

     • Jason Edelman (@jedelman8)
     • Gabriele Gerbino (@GGabriele)
     • Trishna Guha (@trishnaguha)

   Hint

   If you notice any issues in this documentation, you can edit this document to improve it.

   ══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

MORE INFO                          *nxos_vrf-moreinfo*
>
All arguments are omni-completed, but if you really want to see the online docs:
https://docs.ansible.com/ansible/latest/modules/nxos_vrf_module.html
