DEPRECATED                   *iosxr_interface*

                                      Removed in Ansible:
                  version: 2.13
        Why:      Newer and updated modules released with more functionality in Ansible 2.9
    Alternative:  iosxr_interfaces

SYNOPSIS                   *iosxr_interface-synopsis*

     • This module provides declarative management of Interfaces on Cisco IOS XR network devices.

REQUIREMENTS                   *iosxr_interface-requirements*

   The below requirements are needed on the host that executes this module.

     • ncclient >= 0.5.3 when using netconf
     • lxml >= 4.1.1 when using netconf

PARAMETERS                   *iosxr_interface-parameters*

    Parameter   Choices/Defaults                                                                               Comments
   active         Choices:       Whether the interface is active or preconfigured. Preconfiguration allows you to configure modular services cards before they are inserted into the router. When the
   -              • active ←     cards are inserted, they are instantly configured. Active cards are the ones already inserted.
   added in 2.5   • preconfigure
   aggregate                     List of Interface definitions. Include multiple interface configurations together, one each on a separate line
   -
   delay        Default:         Time in seconds to wait before checking for the operational state on remote device. This wait is applicable for operational state argument which are state with
   -            10               values up/down, tx_rate and rx_rate.
   description                   Description of Interface being configured.
   -
   duplex         Choices:
   -              • full         Configures the interface duplex mode. Default is auto-negotiation when not configured.
                  • half
   enabled        Choices:
   boolean        • no           Removes the shutdown configuration, which removes the forced administrative down on the interface, enabling it to move to an up or down state.
                  • yes ←
   mtu                           Sets the MTU value for the interface. Range is between 64 and 65535'
   -
   name                          Name of the interface to configure in type + path format. e.g. GigabitEthernet0/0/0/0
   - / required
                                 Deprecated
                                 Starting with Ansible 2.5 we recommend using connection: network_cli.
   provider                      For more information please see the Network Guide.
   dictionary
                                 ════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

                                 A dict object containing connection details.
    host                         Specifies the DNS host name or address for connecting to the remote device over the specified transport. The value of host is used as the destination address for
    string /                     the transport.
    required
    password                     Specifies the password to use to authenticate the connection to the remote device. This value is used to authenticate the SSH session. If the value is not specified
    string                       in the task, the value of environment variable ANSIBLE_NET_PASSWORD will be used instead.
    port        Default:         Specifies the port to use when building the connection to the remote device.
    integer     22
    ssh_keyfile                  Specifies the SSH key to use to authenticate the connection to the remote device. This value is the path to the key used to authenticate the SSH session. If the
    path                         value is not specified in the task, the value of environment variable ANSIBLE_NET_SSH_KEYFILE will be used instead.
    timeout     Default:         Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands. If the timeout is exceeded before the
    integer     10               operation is completed, the module will error.
    username                     Configures the username to use to authenticate the connection to the remote device. This value is used to authenticate the SSH session. If the value is not
    string                       specified in the task, the value of environment variable ANSIBLE_NET_USERNAME will be used instead.
   rx_rate                       Receiver rate in bits per second (bps).
   -                             This is state check parameter only.
                                 Supports conditionals, see Conditionals in Networking Modules
                  Choices:
   speed          • 10           Configure the speed for an interface. Default is auto-negotiation when not configured.
   -              • 100
                  • 1000
                  Choices:
   state          • present ←
   -              • absent       State of the Interface configuration, up means present and operationally up and down means present and operationally down
                  • up
                  • down
   tx_rate                       Transmit rate in bits per second (bps).
   -                             This is state check parameter only.
                                 Supports conditionals, see Conditionals in Networking Modules

NOTES                   *iosxr_interface-notes*

   Note

     • This module works with connection network_cli and netconf. See the IOS-XR Platform Options.
     • Tested against IOS XRv 6.1.3.
     • Preconfiguration of physical interfaces is not supported with netconf transport.
     • For more information on using Ansible to manage network devices see the Ansible Network Guide
     • For more information on using Ansible to manage Cisco devices see the Cisco integration page.

EXAMPLES                   *iosxr_interface-examples*

 - name: configure interface
   iosxr_interface:
       name: GigabitEthernet0/0/0/2
       description: test-interface
       speed: 100
       duplex: half
       mtu: 512

 - name: remove interface
   iosxr_interface:
     name: GigabitEthernet0/0/0/2
     state: absent

 - name: make interface up
   iosxr_interface:
     name: GigabitEthernet0/0/0/2
     enabled: True

 - name: make interface down
   iosxr_interface:
     name: GigabitEthernet0/0/0/2
     enabled: False

 - name: Create interface using aggregate
   iosxr_interface:
     aggregate:
     - name: GigabitEthernet0/0/0/3
     - name: GigabitEthernet0/0/0/2
     speed: 100
     duplex: full
     mtu: 512
     state: present

 - name: Create interface using aggregate along with additional params in aggregate
   iosxr_interface:
     aggregate:
     - { name: GigabitEthernet0/0/0/3, description: test-interface 3 }
     - { name: GigabitEthernet0/0/0/2, description: test-interface 2 }
     speed: 100
     duplex: full
     mtu: 512
     state: present

 - name: Delete interface using aggregate
   iosxr_interface:
     aggregate:
     - name: GigabitEthernet0/0/0/3
     - name: GigabitEthernet0/0/0/2
     state: absent

 - name: Check intent arguments
   iosxr_interface:
     name: GigabitEthernet0/0/0/5
     state: up
     delay: 20

 - name: Config + intent
   iosxr_interface:
     name: GigabitEthernet0/0/0/5
     enabled: False
     state: down
     delay: 20

RETURN VALUES                   *iosxr_interface-return values*

   Common return values are documented here, the following are the fields unique to this module:

     Key    Returned                                                                                   Description
            always
            (empty   The list of configuration mode commands sent to device with transport cli
   commands list     Sample:
   list     when no  ['interface GigabitEthernet0/0/0/2', 'description test-interface', 'duplex half', 'mtu 512']
            commands
            to send)
            always   NetConf rpc xml sent to device with transport netconf
   xml      (empty   Sample:
   list     list     ['<config xmlns:xc="urn:ietf:params:xml:ns:netconf:base:1.0"> <interface-configurations xmlns="http://cisco.com/ns/yang/Cisco-IOS-XR-ifmgr-cfg"> <interface-configuration
   added in when no  xc:operation="merge"> <active>act</active> <interface-name>GigabitEthernet0/0/0/0</interface-name> <description>test-interface-0</description> <mtus><mtu>
   2.5      xml rpc  <owner>GigabitEthernet</owner> <mtu>512</mtu> </mtu></mtus> <ethernet xmlns="http://cisco.com/ns/yang/Cisco-IOS-XR-drivers-media-eth-cfg"> <speed>100</speed>
            to send) <duplex>half</duplex> </ethernet> </interface-configuration> </interface-configurations></config>']

STATUS                   *iosxr_interface-status*

     • This module will be removed in version 2.13. [deprecated]
     • For more information see DEPRECATED.

     • Ganesh Nalawade (@ganeshrn)
     • Kedar Kekan (@kedarX)

   Hint

   If you notice any issues in this documentation, you can edit this document to improve it.

   ══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

MORE INFO                          *iosxr_interface-moreinfo*
>
All arguments are omni-completed, but if you really want to see the online docs:
https://docs.ansible.com/ansible/latest/modules/iosxr_interface_module.html
