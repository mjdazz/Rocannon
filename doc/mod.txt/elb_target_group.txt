SYNOPSIS                   *elb_target_group*

     • Manage an AWS Elastic Load Balancer target group. See https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html or
       https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-target-groups.html for details.

REQUIREMENTS                   *elb_target_group-requirements*

   The below requirements are needed on the host that executes this module.

     • boto
     • boto3
     • python >= 2.6

PARAMETERS                   *elb_target_group-parameters*

             Parameter           Choices/Defaults                                                                      Comments
   aws_access_key                                 AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.
   string                                         aliases: ec2_access_key, access_key
   aws_secret_key                                 AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.
   string                                         aliases: ec2_secret_key, secret_key
   debug_botocore_endpoint_logs    Choices:       Use a botocore.endpoint logger to parse the unique (rather than total) "resource:action" API calls made during a task, outputing the set to the
   boolean                         • no ←         resource_actions key in the task results. Use the aws_resource_action callback to output to total list made during a playbook. The
   added in 2.8                    • yes          ANSIBLE_DEBUG_BOTOCORE_LOGS environment variable may also be used.
   deregistration_delay_timeout                   The amount time for Elastic Load Balancing to wait before changing the state of a deregistering target from draining to unused. The range is 0-3600
   -                                              seconds.
   ec2_url                                        Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required.
   string                                         Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.
   health_check_interval                          The approximate amount of time, in seconds, between health checks of an individual target.
   -
   health_check_path                              The ping path that is the destination on the targets for health checks. The path must be defined in order to set a health check.
   -
                                 Default:
                                 "The port on
   health_check_port             which each       The port the load balancer uses when performing health checks on targets. Can be set to 'traffic-port' to match target port.
   -                             target receives
                                 traffic from the
                                 load balancer."
                                   Choices:
   health_check_protocol           • http         The protocol the load balancer uses when performing health checks on targets.
   -                               • https
                                   • tcp
   health_check_timeout                           The amount of time, in seconds, during which no response from a target means a failed health check.
   -
   healthy_threshold_count                        The number of consecutive health checks successes required before considering an unhealthy target healthy.
   -
   modify_targets                  Choices:
   boolean                         • no           Whether or not to alter existing targets in the group to match what is passed with the module
                                   • yes ←
   name                                           The name of the target group.
   - / required
   port                                           The port on which the targets receive traffic. This port is used unless you specify a port override when registering the target. Required if state
   -                                              is present.
   profile                                        Uses a boto profile. Only works with boto >= 2.24.0.
   string
                                   Choices:
   protocol                        • http         The protocol to use for routing traffic to the targets. Required when state is present.
   -                               • https
                                   • tcp
   purge_tags                      Choices:       If yes, existing tags will be purged from the resource to match exactly what is defined by tags parameter. If the tag parameter is not set then
   boolean                         • no           tags will not be modified.
                                   • yes ←
   region                                         The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See
   string                                         http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region
                                                  aliases: aws_region, ec2_region
   security_token                                 AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.
   string                                         aliases: access_token
   state                           Choices:
   - / required                    • present      Create or destroy the target group.
                                   • absent
   stickiness_enabled              Choices:
   boolean                         • no           Indicates whether sticky sessions are enabled.
                                   • yes
   stickiness_lb_cookie_duration                  The time period, in seconds, during which requests from a client should be routed to the same target. After this time period expires, the load
   -                                              balancer-generated cookie is considered stale. The range is 1 second to 1 week (604800 seconds).
   stickiness_type               Default:         The type of sticky sessions. The possible value is lb_cookie.
   -                             "lb_cookie"
   successful_response_codes                      The HTTP codes to use when checking for a successful response from a target.
   -                                              Accepts multiple values (for example, "200,202") or a range of values (for example, "200-299").
                                                  Requires the health_check_protocol parameter to be set.
   tags                                           A dictionary of one or more tags to assign to the target group.
   -
                                                  The type of target that you must specify when registering targets with this target group. The possible values are instance (targets are specified
   target_type                     Choices:       by instance ID), ip (targets are specified by IP address) or lambda (target is specified by ARN). Note that you can't specify targets for a target
   -                               • instance ←   group using more than one type. Target type lambda only accept one target. When more than one target is specified, only the first one is used. All
   added in 2.5                    • ip           additional targets are ignored. If the target type is ip, specify IP addresses from the subnets of the virtual private cloud (VPC) for the target
                                   • lambda       group, the RFC 1918 range (10.0.0.0/8, 172.16.0.0/12, and 192.168.0.0/16), and the RFC 6598 range (100.64.0.0/10). You can't specify publicly
                                                  routable IP addresses.
   targets                                        A list of targets to assign to the target group. This parameter defaults to an empty list. Unless you set the 'modify_targets' parameter then all
   -                                              existing targets will be removed from the group. The list should be an Id and a Port parameter. See the Examples for detail.
   unhealthy_threshold_count                      The number of consecutive health check failures required before considering a target unhealthy.
   -
   validate_certs                  Choices:
   boolean                         • no           When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0.
                                   • yes ←
   vpc_id                                         The identifier of the virtual private cloud (VPC). Required when state is present.
   -
   wait                            Choices:
   boolean                         • no ←         Whether or not to wait for the target group.
   added in 2.4                    • yes
   wait_timeout                  Default:
   -                             200              The time to wait for the target group.
   added in 2.4

NOTES                   *elb_target_group-notes*

   Note

     • Once a target group has been created, only its health check can then be modified using subsequent calls
     • If parameters are not set within the module, the following environment variables can be used in decreasing order of precedence AWS_URL or EC2_URL, AWS_ACCESS_KEY_ID or AWS_ACCESS_KEY or
       EC2_ACCESS_KEY, AWS_SECRET_ACCESS_KEY or AWS_SECRET_KEY or EC2_SECRET_KEY, AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN, AWS_REGION or EC2_REGION
     • Ansible uses the boto configuration file (typically ~/.boto) if no credentials are provided. See https://boto.readthedocs.io/en/latest/boto_config_tut.html
     • AWS_REGION or EC2_REGION can be typically be used to specify the AWS region, when required, but this can also be configured in the boto config file

EXAMPLES                   *elb_target_group-examples*

 # Note: These examples do not set authentication details, see the AWS Guide for details.

 # Create a target group with a default health check
 - elb_target_group:
     name: mytargetgroup
     protocol: http
     port: 80
     vpc_id: vpc-01234567
     state: present

 # Modify the target group with a custom health check
 - elb_target_group:
     name: mytargetgroup
     protocol: http
     port: 80
     vpc_id: vpc-01234567
     health_check_path: /
     successful_response_codes: "200,250-260"
     state: present

 # Delete a target group
 - elb_target_group:
     name: mytargetgroup
     state: absent

 # Create a target group with instance targets
 - elb_target_group:
     name: mytargetgroup
     protocol: http
     port: 81
     vpc_id: vpc-01234567
     health_check_path: /
     successful_response_codes: "200,250-260"
     targets:
       - Id: i-01234567
         Port: 80
       - Id: i-98765432
         Port: 80
     state: present
     wait_timeout: 200
     wait: True

 # Create a target group with IP address targets
 - elb_target_group:
     name: mytargetgroup
     protocol: http
     port: 81
     vpc_id: vpc-01234567
     health_check_path: /
     successful_response_codes: "200,250-260"
     target_type: ip
     targets:
       - Id: 10.0.0.10
         Port: 80
         AvailabilityZone: all
       - Id: 10.0.0.20
         Port: 80
     state: present
     wait_timeout: 200
     wait: True

 # Using lambda as targets require that the target group
 # itself is allow to invoke the lambda function.
 # therefore you need first to create an empty target group
 # to receive its arn, second, allow the target group
 # to invoke the lamba function and third, add the target
 # to the target group
 - name: first, create empty target group
   elb_target_group:
     name: my-lambda-targetgroup
     target_type: lambda
     state: present
     modify_targets: False
   register: out

 - name: second, allow invoke of the lambda
   lambda_policy:
     state: "{{ state | default('present') }}"
     function_name: my-lambda-function
     statement_id: someID
     action: lambda:InvokeFunction
     principal: elasticloadbalancing.amazonaws.com
     source_arn: "{{ out.target_group_arn }}"

 - name: third, add target
   elb_target_group:
     name: my-lambda-targetgroup
     target_type: lambda
     state: present
     targets:
         - Id: arn:aws:lambda:eu-central-1:123456789012:function:my-lambda-function

RETURN VALUES                   *elb_target_group-return values*

   Common return values are documented here, the following are the fields unique to this module:

                    Key                       Returned                                                                     Description
   deregistration_delay_timeout_seconds                     The amount time for Elastic Load Balancing to wait before changing the state of a deregistering target from draining to unused.
   integer                               when state present Sample:
                                                            300
   health_check_interval_seconds                            The approximate amount of time, in seconds, between health checks of an individual target.
   integer                               when state present Sample:
                                                            30
   health_check_path                                        The destination for the health check request.
   string                                when state present Sample:
                                                            /index.html
   health_check_port                                        The port to use to connect with the target.
   string                                when state present Sample:
                                                            traffic-port
   health_check_protocol                                    The protocol to use to connect with the target.
   string                                when state present Sample:
                                                            HTTP
   health_check_timeout_seconds                             The amount of time, in seconds, during which no response means a failed health check.
   integer                               when state present Sample:
                                                            5
   healthy_threshold_count                                  The number of consecutive health checks successes required before considering an unhealthy target healthy.
   integer                               when state present Sample:
                                                            5
   load_balancer_arns                    when state present The Amazon Resource Names (ARN) of the load balancers that route traffic to this target group.
   list
   matcher                                                  The HTTP codes to use when checking for a successful response from a target.
   dictionary                            when state present Sample:
                                                            {'http_code': '200'}
   port                                                     The port on which the targets are listening.
   integer                               when state present Sample:
                                                            80
   protocol                                                 The protocol to use for routing traffic to the targets.
   string                                when state present Sample:
                                                            HTTP
   stickiness_enabled                                       Indicates whether sticky sessions are enabled.
   boolean                               when state present Sample:
                                                            True
   stickiness_lb_cookie_duration_seconds                    The time period, in seconds, during which requests from a client should be routed to the same target.
   integer                               when state present Sample:
                                                            86400
   stickiness_type                                          The type of sticky sessions.
   string                                when state present Sample:
                                                            lb_cookie
   tags                                                     The tags attached to the target group.
   dictionary                            when state present Sample:
                                                            { 'Tag': 'Example' }
   target_group_arn                                         The Amazon Resource Name (ARN) of the target group.
   string                                when state present Sample:
                                                            arn:aws:elasticloadbalancing:ap-southeast-2:01234567890:targetgroup/mytargetgroup/aabbccddee0044332211
   target_group_name                                        The name of the target group.
   string                                when state present Sample:
                                                            mytargetgroup
   unhealthy_threshold_count                                The number of consecutive health check failures required before considering the target unhealthy.
   integer                               when state present Sample:
                                                            2
   vpc_id                                                   The ID of the VPC for the targets.
   string                                when state present Sample:
                                                            vpc-0123456

STATUS                   *elb_target_group-status*

     • This module is not guaranteed to have a backwards compatible interface. [preview]
     • This module is maintained by the Ansible Community. [community]

     • Rob White (@wimnat)

   Hint

   If you notice any issues in this documentation, you can edit this document to improve it.

   ══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

MORE INFO                          *elb_target_group-moreinfo*
>
All arguments are omni-completed, but if you really want to see the online docs:
https://docs.ansible.com/ansible/latest/modules/elb_target_group_module.html
