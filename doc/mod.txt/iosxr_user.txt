SYNOPSIS                   *iosxr_user*

     • This module provides declarative management of the local usernames configured on network devices. It allows playbooks to manage either individual usernames or the aggregate of usernames in
       the current running config. It also supports purging usernames from the configuration that are not explicitly defined.

REQUIREMENTS                   *iosxr_user-requirements*

   The below requirements are needed on the host that executes this module.

     • ncclient >= 0.5.3 when using netconf
     • lxml >= 4.1.1 when using netconf
     • base64 when using public_key_contents or public_key
     • paramiko when using public_key_contents or public_key

PARAMETERS                   *iosxr_user-parameters*

        Parameter      Choices/Defaults                                                                           Comments
   admin                 Choices:       Enters into administration configuration mode for making config changes to the device.
   boolean               • no ←         Applicable only when using network_cli transport
   added in 2.8          • yes
   aggregate                            The set of username objects to be configured on the remote Cisco IOS XR device. The list entries can either be the username or a hash of username and
   -                                    properties. This argument is mutually exclusive with the name argument.
                                        aliases: users, collection
   configured_password                  The password to be configured on the Cisco IOS XR device. The password needs to be provided in clear text. Password is encrypted on the device when used with
   -                                    cli and by Ansible when used with netconf using the same MD5 hash technique with salt size of 3. Please note that this option is not same as provider
                                        password.
   group                                Configures the group for the username in the device running configuration. The argument accepts a string value defining the group name. This argument does
   -                                    not check if the group has been configured on the device.
                                        aliases: role
   groups                               Configures the groups for the username in the device running configuration. The argument accepts a list of group names. This argument does not check if the
   -                                    group has been configured on the device. It is similar to the aggregate command for usernames, but lets you configure multiple groups for the user(s).
   added in 2.5
   name                                 The username to be configured on the Cisco IOS XR device. This argument accepts a string value and is mutually exclusive with the aggregate argument. Please
   -                                    note that this option is not same as provider username.
                                        Deprecated
                                        Starting with Ansible 2.5 we recommend using connection: network_cli.
   provider                             For more information please see the Network Guide.
   dictionary
                                        ═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

                                        A dict object containing connection details.
       host                             Specifies the DNS host name or address for connecting to the remote device over the specified transport. The value of host is used as the destination address
       string /                         for the transport.
       required
       password                         Specifies the password to use to authenticate the connection to the remote device. This value is used to authenticate the SSH session. If the value is not
       string                           specified in the task, the value of environment variable ANSIBLE_NET_PASSWORD will be used instead.
       port            Default:         Specifies the port to use when building the connection to the remote device.
       integer         22
       ssh_keyfile                      Specifies the SSH key to use to authenticate the connection to the remote device. This value is the path to the key used to authenticate the SSH session. If
       path                             the value is not specified in the task, the value of environment variable ANSIBLE_NET_SSH_KEYFILE will be used instead.
       timeout         Default:         Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands. If the timeout is exceeded before the
       integer         10               operation is completed, the module will error.
       username                         Configures the username to use to authenticate the connection to the remote device. This value is used to authenticate the SSH session. If the value is not
       string                           specified in the task, the value of environment variable ANSIBLE_NET_USERNAME will be used instead.
   public_key                           Configures the contents of the public keyfile to upload to the IOS-XR node. This enables users to login using the accompanying private key. IOS-XR only
   -                                    accepts base64 decoded files, so this will be decoded and uploaded to the node. Do note that this requires an OpenSSL public key file, PuTTy generated files
   added in 2.5                         will not work! Mutually exclusive with public_key_contents. If used with multiple users in aggregates, then the same key file is used for all users.
   public_key_contents                  Configures the contents of the public keyfile to upload to the IOS-XR node. This enables users to login using the accompanying private key. IOS-XR only
   -                                    accepts base64 decoded files, so this will be decoded and uploaded to the node. Do note that this requires an OpenSSL public key file, PuTTy generated files
   added in 2.5                         will not work! Mutually exclusive with public_key.If used with multiple users in aggregates, then the same key file is used for all users.
   purge                 Choices:       Instructs the module to consider the resource definition absolute. It will remove any previously configured usernames on the device with the exception of the
   boolean               • no ←         `admin` user and the current defined set of users.
                         • yes
   state                 Choices:       Configures the state of the username definition as it relates to the device operational configuration. When set to present, the username(s) should be
   -                     • present ←    configured in the device active configuration and when set to absent the username(s) should not be in the device active configuration
                         • absent
   update_password       Choices:       Since passwords are encrypted in the device running config, this argument will instruct the module when to change the password. When set to always, the
   -                     • on_create    password will always be updated in the device and when set to on_create the password will be updated only if the username is created.
                         • always ←

NOTES                   *iosxr_user-notes*

   Note

     • This module works with connection network_cli and netconf. See the IOS-XR Platform Options.
     • Tested against IOS XRv 6.1.3
     • For more information on using Ansible to manage network devices see the Ansible Network Guide
     • For more information on using Ansible to manage Cisco devices see the Cisco integration page.

EXAMPLES                   *iosxr_user-examples*

 - name: create a new user
   iosxr_user:
     name: ansible
     configured_password: mypassword
     state: present
 - name: create a new user in admin configuration mode
   iosxr_user:
     name: ansible
     configured_password: mypassword
     admin: True
     state: present
 - name: remove all users except admin
   iosxr_user:
     purge: True
 - name: set multiple users to group sys-admin
   iosxr_user:
     aggregate:
       - name: netop
       - name: netend
     group: sysadmin
     state: present
 - name: set multiple users to multiple groups
   iosxr_user:
     aggregate:
       - name: netop
       - name: netend
     groups:
       - sysadmin
       - root-system
     state: present
 - name: Change Password for User netop
   iosxr_user:
     name: netop
     configured_password: "{{ new_password }}"
     update_password: always
     state: present
 - name: Add private key authentication for user netop
   iosxr_user:
     name: netop
     state: present
     public_key_contents: "{{ lookup('file', '/home/netop/.ssh/id_rsa.pub' }}"

RETURN VALUES                   *iosxr_user-return values*

   Common return values are documented here, the following are the fields unique to this module:

     Key    Returned                                                                                   Description
   commands          The list of configuration mode commands to send to the device
   list     always   Sample:
                     ['username ansible secret password group sysadmin', 'username admin secret admin']
            always   NetConf rpc xml sent to device with transport netconf
   xml      (empty   Sample:
   list     list     ['<config xmlns:xc="urn:ietf:params:xml:ns:netconf:base:1.0"> <aaa xmlns="http://cisco.com/ns/yang/Cisco-IOS-XR-aaa-lib-cfg"> <usernames
   added in when no  xmlns="http://cisco.com/ns/yang/Cisco-IOS-XR-aaa-locald-cfg"> <username xc:operation="merge"> <name>test7</name> <usergroup-under-usernames> <usergroup-under-username>
   2.5      xml rpc  <name>sysadmin</name> </usergroup-under-username> </usergroup-under-usernames> <secret>$1$ZsXC$zZ50wqhDC543ZWQkkAHLW0</secret> </username> </usernames> </aaa> </config>']
            to send)

STATUS                   *iosxr_user-status*

     • This module is not guaranteed to have a backwards compatible interface. [preview]
     • This module is maintained by the Ansible Network Team. [network]

RED HAT SUPPORT                   *iosxr_user-red hat support*

     • Trishna Guha (@trishnaguha)
     • Sebastiaan van Doesselaar (@sebasdoes)
     • Kedar Kekan (@kedarX)

   Hint

   If you notice any issues in this documentation, you can edit this document to improve it.

   ══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

MORE INFO                          *iosxr_user-moreinfo*
>
All arguments are omni-completed, but if you really want to see the online docs:
https://docs.ansible.com/ansible/latest/modules/iosxr_user_module.html
