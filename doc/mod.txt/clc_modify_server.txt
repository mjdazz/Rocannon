SYNOPSIS                   *clc_modify_server*

     • An Ansible module to modify servers in CenturyLink Cloud.

REQUIREMENTS                   *clc_modify_server-requirements*

   The below requirements are needed on the host that executes this module.

     • python = 2.7
     • requests >= 2.5.0
     • clc-sdk

PARAMETERS                   *clc_modify_server-parameters*

           Parameter         Choices/Defaults                                                                        Comments
   alert_policy_id                            The alert policy id to be associated to the server. This is mutually exclusive with 'alert_policy_name'
   -
   alert_policy_name                          The alert policy name to be associated to the server. This is mutually exclusive with 'alert_policy_id'
   -
   anti_affinity_policy_id                    The anti affinity policy id to be set for a hyper scale server. This is mutually exclusive with 'anti_affinity_policy_name'
   -
   anti_affinity_policy_name                  The anti affinity policy name to be set for a hyper scale server. This is mutually exclusive with 'anti_affinity_policy_id'
   -
   cpu                                        How many CPUs to update on the server
   -
   memory                                     Memory (in GB) to set to the server.
   -
   server_ids                                 A list of server Ids to modify.
   - / required
   state                       Choices:
   -                           • present ←    The state to insure that the provided resources are in.
                               • absent
   wait                        Choices:
   boolean                     • no           Whether to wait for the provisioning tasks to finish before returning.
                               • yes ←

NOTES                   *clc_modify_server-notes*

   Note

     • To use this module, it is required to set the below environment variables which enables access to the Centurylink Cloud - CLC_V2_API_USERNAME, the account login id for the centurylink cloud
       - CLC_V2_API_PASSWORD, the account password for the centurylink cloud
     • Alternatively, the module accepts the API token and account alias. The API token can be generated using the CLC account login and password via the HTTP api call @
       https://api.ctl.io/v2/authentication/login - CLC_V2_API_TOKEN, the API token generated from https://api.ctl.io/v2/authentication/login - CLC_ACCT_ALIAS, the account alias associated with the
       centurylink cloud
     • Users can set CLC_V2_API_URL to specify an endpoint for pointing to a different CLC environment.

EXAMPLES                   *clc_modify_server-examples*

 # Note - You must set the CLC_V2_API_USERNAME And CLC_V2_API_PASSWD Environment variables before running these examples

 - name: set the cpu count to 4 on a server
   clc_modify_server:
     server_ids:
         - UC1TESTSVR01
         - UC1TESTSVR02
     cpu: 4
     state: present

 - name: set the memory to 8GB on a server
   clc_modify_server:
     server_ids:
         - UC1TESTSVR01
         - UC1TESTSVR02
     memory: 8
     state: present

 - name: set the anti affinity policy on a server
   clc_modify_server:
     server_ids:
         - UC1TESTSVR01
         - UC1TESTSVR02
     anti_affinity_policy_name: 'aa_policy'
     state: present

 - name: remove the anti affinity policy on a server
   clc_modify_server:
     server_ids:
         - UC1TESTSVR01
         - UC1TESTSVR02
     anti_affinity_policy_name: 'aa_policy'
     state: absent

 - name: add the alert policy on a server
   clc_modify_server:
     server_ids:
         - UC1TESTSVR01
         - UC1TESTSVR02
     alert_policy_name: 'alert_policy'
     state: present

 - name: remove the alert policy on a server
   clc_modify_server:
     server_ids:
         - UC1TESTSVR01
         - UC1TESTSVR02
     alert_policy_name: 'alert_policy'
     state: absent

 - name: set the memory to 16GB and cpu to 8 core on a lust if servers
   clc_modify_server:
     server_ids:
         - UC1TESTSVR01
         - UC1TESTSVR02
     cpu: 8
     memory: 16
     state: present

RETURN VALUES                   *clc_modify_server-return values*

   Common return values are documented here, the following are the fields unique to this module:

      Key     Returned                                                                                  Description
   server_ids          The list of server ids that are changed
   list       success  Sample:
                       ['UC1TEST-SVR01', 'UC1TEST-SVR02']
                       The list of server objects that are changed
                       Sample:
                       [{'changeInfo': {'createdBy': 'service.wfad', 'createdDate': 1438196820, 'modifiedBy': 'service.wfad', 'modifiedDate': 1438196820}, 'description': 'test-server', 'details':
                       {'alertPolicies': [], 'cpu': 1, 'customFields': [], 'diskCount': 3, 'disks': [{'id': '0:0', 'partitionPaths': [], 'sizeGB': 1}, {'id': '0:1', 'partitionPaths': [], 'sizeGB':
                       2}, {'id': '0:2', 'partitionPaths': [], 'sizeGB': 14}], 'hostName': '', 'inMaintenanceMode': False, 'ipAddresses': [{'internal': '10.1.1.1'}], 'memoryGB': 1, 'memoryMB':
                       1024, 'partitions': [], 'powerState': 'started', 'snapshots': [], 'storageGB': 17}, 'groupId': '086ac1dfe0b6411989e8d1b77c4065f0', 'id': 'test-server', 'ipaddress':
                       '10.120.45.23', 'isTemplate': False, 'links': [{'href': '/v2/servers/wfad/test-server', 'id': 'test-server', 'rel': 'self', 'verbs': ['GET', 'PATCH', 'DELETE']}, {'href':
   servers    success  '/v2/groups/wfad/086ac1dfe0b6411989e8d1b77c4065f0', 'id': '086ac1dfe0b6411989e8d1b77c4065f0', 'rel': 'group'}, {'href': '/v2/accounts/wfad', 'id': 'wfad', 'rel': 'account'},
   list                {'href': '/v2/billing/wfad/serverPricing/test-server', 'rel': 'billing'}, {'href': '/v2/servers/wfad/test-server/publicIPAddresses', 'rel': 'publicIPAddresses', 'verbs':
                       ['POST']}, {'href': '/v2/servers/wfad/test-server/credentials', 'rel': 'credentials'}, {'href': '/v2/servers/wfad/test-server/statistics', 'rel': 'statistics'}, {'href':
                       '/v2/servers/wfad/510ec21ae82d4dc89d28479753bf736a/upcomingScheduledActivities', 'rel': 'upcomingScheduledActivities'}, {'href':
                       '/v2/servers/wfad/510ec21ae82d4dc89d28479753bf736a/scheduledActivities', 'rel': 'scheduledActivities', 'verbs': ['GET', 'POST']}, {'href':
                       '/v2/servers/wfad/test-server/capabilities', 'rel': 'capabilities'}, {'href': '/v2/servers/wfad/test-server/alertPolicies', 'rel': 'alertPolicyMappings', 'verbs': ['POST']},
                       {'href': '/v2/servers/wfad/test-server/antiAffinityPolicy', 'rel': 'antiAffinityPolicyMapping', 'verbs': ['PUT', 'DELETE']}, {'href':
                       '/v2/servers/wfad/test-server/cpuAutoscalePolicy', 'rel': 'cpuAutoscalePolicyMapping', 'verbs': ['PUT', 'DELETE']}], 'locationId': 'UC1', 'name': 'test-server', 'os':
                       'ubuntu14_64Bit', 'osType': 'Ubuntu 14 64-bit', 'status': 'active', 'storageType': 'standard', 'type': 'standard'}]

STATUS                   *clc_modify_server-status*

     • This module is not guaranteed to have a backwards compatible interface. [preview]
     • This module is maintained by the Ansible Community. [community]

     • CLC Runner (@clc-runner)

   Hint

   If you notice any issues in this documentation, you can edit this document to improve it.

   ══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

MORE INFO                          *clc_modify_server-moreinfo*
>
All arguments are omni-completed, but if you really want to see the online docs:
https://docs.ansible.com/ansible/latest/modules/clc_modify_server_module.html
