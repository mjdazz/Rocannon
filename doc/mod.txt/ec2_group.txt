SYNOPSIS                   *ec2_group*

     • maintains ec2 security groups. This module has a dependency on python-boto >= 2.5

REQUIREMENTS                   *ec2_group-requirements*

   The below requirements are needed on the host that executes this module.

     • boto
     • boto3
     • python >= 2.6

PARAMETERS                   *ec2_group-parameters*

            Parameter           Choices/Defaults                                                                       Comments
   aws_access_key                                AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.
   string                                        aliases: ec2_access_key, access_key
   aws_secret_key                                AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.
   string                                        aliases: ec2_secret_key, secret_key
   debug_botocore_endpoint_logs   Choices:       Use a botocore.endpoint logger to parse the unique (rather than total) "resource:action" API calls made during a task, outputing the set to the
   boolean                        • no ←         resource_actions key in the task results. Use the aws_resource_action callback to output to total list made during a playbook. The
   added in 2.8                   • yes          ANSIBLE_DEBUG_BOTOCORE_LOGS environment variable may also be used.
   description                                   Description of the security group. Required when state is present.
   -
   ec2_url                                       Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required.
   string                                        Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.
   group_id                                      Id of group to delete (works only with absent).
   -                                             One of and only one of name or group_id is required.
   added in 2.4
   name                                          Name of the security group.
   -                                             One of and only one of name or group_id is required.
                                                 Required if state=present.
   profile                                       Uses a boto profile. Only works with boto >= 2.24.0.
   string
   purge_rules                    Choices:
   boolean                        • no           Purge existing rules on security group that are not found in rules
                                  • yes ←
   purge_rules_egress             Choices:
   boolean                        • no           Purge existing rules_egress on security group that are not found in rules_egress
                                  • yes ←
   purge_tags                     Choices:       If yes, existing tags will be purged from the resource to match exactly what is defined by tags parameter. If the tags parameter is not set then
   boolean                        • no           tags will not be modified.
   added in 2.4                   • yes ←
   region                                        The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See
   string                                        http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region
                                                 aliases: aws_region, ec2_region
                                                 List of firewall inbound rules to enforce in this group (see example). If none are supplied, no inbound rules will be enabled. Rules list may
   rules                                         include its own name in `group_name`. This allows idempotent loopback additions (e.g. allow group to access itself). Rule sources list support was
   -                                             added in version 2.4. This allows to define multiple sources per source type as well as multiple source types per rule. Prior to 2.4 an individual
                                                 source is allowed. In version 2.5 support for rule descriptions was added.
   rules_egress                                  List of firewall outbound rules to enforce in this group (see example). If none are supplied, a default all-out rule is assumed. If an empty list is
   -                                             supplied, no outbound rules will be enabled. Rule Egress sources list support was added in version 2.4. In version 2.5 support for rule descriptions
                                                 was added.
   security_token                                AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.
   string                                        aliases: access_token
   state                          Choices:
   -                              • present ←    Create or delete a security group
                                  • absent
   tags
   -                                             A dictionary of one or more tags to assign to the security group.
   added in 2.4
   validate_certs                 Choices:
   boolean                        • no           When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0.
                                  • yes ←
   vpc_id                                        ID of the VPC to create the group in.
   -

NOTES                   *ec2_group-notes*

   Note

     • If a rule declares a group_name and that group doesn’t exist, it will be automatically created. In that case, group_desc should be provided as well. The module will refuse to create a
       depended-on group without a description.
     • Preview diff mode support is added in version 2.7.
     • If parameters are not set within the module, the following environment variables can be used in decreasing order of precedence AWS_URL or EC2_URL, AWS_ACCESS_KEY_ID or AWS_ACCESS_KEY or
       EC2_ACCESS_KEY, AWS_SECRET_ACCESS_KEY or AWS_SECRET_KEY or EC2_SECRET_KEY, AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN, AWS_REGION or EC2_REGION
     • Ansible uses the boto configuration file (typically ~/.boto) if no credentials are provided. See https://boto.readthedocs.io/en/latest/boto_config_tut.html
     • AWS_REGION or EC2_REGION can be typically be used to specify the AWS region, when required, but this can also be configured in the boto config file

EXAMPLES                   *ec2_group-examples*

 - name: example using security group rule descriptions
   ec2_group:
     name: "{{ name }}"
     description: sg with rule descriptions
     vpc_id: vpc-xxxxxxxx
     profile: "{{ aws_profile }}"
     region: us-east-1
     rules:
       - proto: tcp
         ports:
         - 80
         cidr_ip: 0.0.0.0/0
         rule_desc: allow all on port 80

 - name: example ec2 group
   ec2_group:
     name: example
     description: an example EC2 group
     vpc_id: 12345
     region: eu-west-1
     aws_secret_key: SECRET
     aws_access_key: ACCESS
     rules:
       - proto: tcp
         from_port: 80
         to_port: 80
         cidr_ip: 0.0.0.0/0
       - proto: tcp
         from_port: 22
         to_port: 22
         cidr_ip: 10.0.0.0/8
       - proto: tcp
         from_port: 443
         to_port: 443
         # this should only be needed for EC2 Classic security group rules
         # because in a VPC an ELB will use a user-account security group
         group_id: amazon-elb/sg-87654321/amazon-elb-sg
       - proto: tcp
         from_port: 3306
         to_port: 3306
         group_id: 123412341234/sg-87654321/exact-name-of-sg
       - proto: udp
         from_port: 10050
         to_port: 10050
         cidr_ip: 10.0.0.0/8
       - proto: udp
         from_port: 10051
         to_port: 10051
         group_id: sg-12345678
       - proto: icmp
         from_port: 8 # icmp type, -1 = any type
         to_port:  -1 # icmp subtype, -1 = any subtype
         cidr_ip: 10.0.0.0/8
       - proto: all
         # the containing group name may be specified here
         group_name: example
       - proto: all
         # in the 'proto' attribute, if you specify -1, all, or a protocol number other than tcp, udp, icmp, or 58 (ICMPv6),
         # traffic on all ports is allowed, regardless of any ports you specify
         from_port: 10050 # this value is ignored
         to_port: 10050 # this value is ignored
         cidr_ip: 10.0.0.0/8

     rules_egress:
       - proto: tcp
         from_port: 80
         to_port: 80
         cidr_ip: 0.0.0.0/0
         cidr_ipv6: 64:ff9b::/96
         group_name: example-other
         # description to use if example-other needs to be created
         group_desc: other example EC2 group

 - name: example2 ec2 group
   ec2_group:
     name: example2
     description: an example2 EC2 group
     vpc_id: 12345
     region: eu-west-1
     rules:
       # 'ports' rule keyword was introduced in version 2.4. It accepts a single port value or a list of values including ranges (from_port-to_port).
       - proto: tcp
         ports: 22
         group_name: example-vpn
       - proto: tcp
         ports:
           - 80
           - 443
           - 8080-8099
         cidr_ip: 0.0.0.0/0
       # Rule sources list support was added in version 2.4. This allows to define multiple sources per source type as well as multiple source types per rule.
       - proto: tcp
         ports:
           - 6379
           - 26379
         group_name:
           - example-vpn
           - example-redis
       - proto: tcp
         ports: 5665
         group_name: example-vpn
         cidr_ip:
           - 172.16.1.0/24
           - 172.16.17.0/24
         cidr_ipv6:
           - 2607:F8B0::/32
           - 64:ff9b::/96
         group_id:
           - sg-edcd9784
   diff: True

 - name: "Delete group by its id"
   ec2_group:
     region: eu-west-1
     group_id: sg-33b4ee5b
     state: absent

RETURN VALUES                   *ec2_group-return values*

   Common return values are documented here, the following are the fields unique to this module:

            Key            Returned                                                                             Description
   description           on            Description of security group
   string                create/update Sample:
                                       My Security Group
   group_id              on            Security group id
   string                create/update Sample:
                                       sg-abcd1234
   group_name            on            Security group name
   string                create/update Sample:
                                       My Security Group
                                       Inbound rules associated with the security group.
   ip_permissions        on            Sample:
   list                  create/update [{'from_port': 8182, 'ip_protocol': 'tcp', 'ip_ranges': [{'cidr_ip': '1.1.1.1/32'}], 'ipv6_ranges': [], 'prefix_list_ids': [], 'to_port': 8182,
                                       'user_id_group_pairs': []}]
   ip_permissions_egress on            Outbound rules associated with the security group.
   list                  create/update Sample:
                                       [{'ip_protocol': -1, 'ip_ranges': [{'cidr_ip': '0.0.0.0/0', 'ipv6_ranges': [], 'prefix_list_ids': [], 'user_id_group_pairs': []}]}]
   owner_id              on            AWS Account ID of the security group
   integer               create/update Sample:
                                       123456789012
   tags                  on            Tags associated with the security group
   dictionary            create/update Sample:
                                       {'Name': 'My Security Group', 'Purpose': 'protecting stuff'}
   vpc_id                on            ID of VPC to which the security group belongs
   string                create/update Sample:
                                       vpc-abcd1234

STATUS                   *ec2_group-status*

     • This module is guaranteed to have backward compatible interface changes going forward. [stableinterface]
     • This module is maintained by the Ansible Core Team. [core]

RED HAT SUPPORT                   *ec2_group-red hat support*

     • Andrew de Quincey (@adq)

   Hint

   If you notice any issues in this documentation, you can edit this document to improve it.

   ══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

MORE INFO                          *ec2_group-moreinfo*
>
All arguments are omni-completed, but if you really want to see the online docs:
https://docs.ansible.com/ansible/latest/modules/ec2_group_module.html
