SYNOPSIS                   *netconf_get*

     • NETCONF is a network management protocol developed and standardized by the IETF. It is documented in RFC 6241.
     • This module allows the user to fetch configuration and state data from NETCONF enabled network devices.

REQUIREMENTS                   *netconf_get-requirements*

   The below requirements are needed on the host that executes this module.

     • ncclient (>=v0.5.2)
     • jxmlease

PARAMETERS                   *netconf_get-parameters*

   Parameter Choices/Defaults                                                                                Comments
               Choices:       Encoding scheme to use when serializing output from the device. The option json will serialize the output as JSON data. If the option value is json it requires
   display     • json         jxmlease to be installed on control node. The option pretty is similar to received XML response but is using human readable format (spaces, new lines). The option
   -           • pretty       value xml is similar to received XML response but removes all XML namespaces.
               • xml
   filter                     This argument specifies the XML string which acts as a filter to restrict the portions of the data to be are retrieved from the remote device. If this option is not
   -                          specified entire configuration or state data is returned in result depending on the value of source option. The filter value can be either XML string or XPath, if the
                              filter is in XPath format the NETCONF server running on remote host should support xpath capability else it will result in an error.
               Choices:       Instructs the module to explicitly lock the datastore specified as source. If no source is defined, the running datastore will be locked. By setting the option value
   lock        • never ←      always is will explicitly lock the datastore mentioned in source option. By setting the option value never it will not lock the source datastore. The value
   -           • always       if-supported allows better interworking with NETCONF servers, which do not support the (un)lock operation for all supported datastores.
               • if-supported
               Choices:
   source      • running      This argument specifies the datastore from which configuration data should be fetched. Valid values are running, candidate and startup. If the source value is not set
   -           • candidate    both configuration and state information are returned in response from running datastore.
               • startup

NOTES                   *netconf_get-notes*

   Note

     • This module requires the NETCONF system service be enabled on the remote device being managed.
     • This module supports the use of connection=netconf
     • This module is supported on ansible_network_os network platforms. See the Network Platform Options for details.

EXAMPLES                   *netconf_get-examples*

 - name: Get running configuration and state data
   netconf_get:

 - name: Get configuration and state data from startup datastore
   netconf_get:
     source: startup

 - name: Get system configuration data from running datastore state (junos)
   netconf_get:
     source: running
     filter: <configuration><system></system></configuration>

 - name: Get configuration and state data in JSON format
   netconf_get:
     display: json

 - name: get schema list using subtree w/ namespaces
   netconf_get:
     display: json
     filter: <netconf-state xmlns="urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring"><schemas><schema/></schemas></netconf-state>
     lock: never

 - name: get schema list using xpath
   netconf_get:
     display: xml
     filter: /netconf-state/schemas/schema

 - name: get interface configuration with filter (iosxr)
   netconf_get:
     display: pretty
     filter: <interface-configurations xmlns="http://cisco.com/ns/yang/Cisco-IOS-XR-ifmgr-cfg"></interface-configurations>
     lock: if-supported

 - name: Get system configuration data from running datastore state (junos)
   netconf_get:
     source: running
     filter: <configuration><system></system></configuration>
     lock: if-supported

 - name: Get complete configuration data from running datastore (SROS)
   netconf_get:
     source: running
     filter: <configure xmlns="urn:nokia.com:sros:ns:yang:sr:conf"/>

 - name: Get complete state data (SROS)
   netconf_get:
     filter: <state xmlns="urn:nokia.com:sros:ns:yang:sr:state"/>

STATUS                   *netconf_get-status*

     • This module is not guaranteed to have a backwards compatible interface. [preview]
     • This module is maintained by the Ansible Network Team. [network]

RED HAT SUPPORT                   *netconf_get-red hat support*

     • Ganesh Nalawade (@ganeshrn)
     • Sven Wisotzky (@wisotzky)

   Hint

   If you notice any issues in this documentation, you can edit this document to improve it.

   ══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

MORE INFO                          *netconf_get-moreinfo*
>
All arguments are omni-completed, but if you really want to see the online docs:
https://docs.ansible.com/ansible/latest/modules/netconf_get_module.html
