SYNOPSIS                   *ecs_service*

     • Creates or terminates ecs services.

REQUIREMENTS                   *ecs_service-requirements*

   The below requirements are needed on the host that executes this module.

     • boto
     • boto3
     • botocore
     • json
     • python >= 2.6

PARAMETERS                   *ecs_service-parameters*

               Parameter             Choices/Defaults                                                                    Comments
   aws_access_key                                     AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.
   string                                             aliases: ec2_access_key, access_key
   aws_secret_key                                     AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.
   string                                             aliases: ec2_secret_key, secret_key
   client_token                                       Unique, case-sensitive identifier you provide to ensure the idempotency of the request. Up to 32 ASCII characters are allowed.
   -
   cluster                                            The name of the cluster in which the service exists
   -
   debug_botocore_endpoint_logs        Choices:       Use a botocore.endpoint logger to parse the unique (rather than total) "resource:action" API calls made during a task, outputing the set to the
   boolean                             • no ←         resource_actions key in the task results. Use the aws_resource_action callback to output to total list made during a playbook. The
   added in 2.8                        • yes          ANSIBLE_DEBUG_BOTOCORE_LOGS environment variable may also be used.
   delay                             Default:         The time to wait before checking that the service is available
   -                                 10
   deployment_configuration                           Optional parameters that control the deployment_configuration; format is '{"maximum_percent":<integer>, "minimum_healthy_percent":<integer>}
   -
   desired_count                                      The count of how many instances of the service. This parameter is required when state=present
   -
   ec2_url                                            Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is
   string                                             required. Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any,
                                                      is used.
   force_new_deployment                Choices:
   boolean                             • no           Force deployment of service even if there are no changes
   added in 2.8                        • yes
   health_check_grace_period_seconds
   -                                                  Seconds to wait before health checking the freshly added/updated services. This option requires botocore >= 1.8.20.
   added in 2.8
   launch_type                         Choices:
   -                                   • EC2          The launch type on which to run your service
   added in 2.7                        • FARGATE
   load_balancers                                     The list of ELBs defined for this service
   -
   name                                               The name of the service
   - / required
   network_configuration                              network configuration of the service. Only applicable for task definitions created with awsvpc network_mode.
   -                                                  assign_public_ip requires botocore >= 1.8.4
             assign_public_ip          Choices:
             boolean                   • no           Whether the task's elastic network interface receives a public IP address. This option requires botocore >= 1.8.4.
             added in 2.7              • yes
             security_groups
             -                                        A list of security group names or group IDs to associate with the task
             added in 2.6
             subnets
             -                                        A list of subnet IDs to associate with the task
             added in 2.6
   placement_constraints
   -                                                  The placement constraints for the tasks in the service
   added in 2.4
   placement_strategy
   -                                                  The placement strategy objects to use for tasks in your service. You can specify a maximum of 5 strategy rules per service
   added in 2.4
   profile                                            Uses a boto profile. Only works with boto >= 2.24.0.
   string
   region                                             The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See
   string                                             http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region
                                                      aliases: aws_region, ec2_region
   repeat                            Default:         The number of times to check that the service is available
   -                                 10
   role                                               The name or full Amazon Resource Name (ARN) of the IAM role that allows your Amazon ECS container agent to make calls to your load balancer on
   -                                                  your behalf. This parameter is only required if you are using a load balancer with your service, in a network mode other than `awsvpc`.
   scheduling_strategy                 Choices:
   -                                   • DAEMON       The scheduling strategy, defaults to "REPLICA" if not given to preserve previous behavior
   added in 2.8                        • REPLICA
   security_token                                     AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.
   string                                             aliases: access_token
   service_registries
   -                                                  describes service discovery registries this service will register with.
   added in 2.8
             arn                                      Service discovery registry ARN
             -
             container_name                           container name for service discovery registration
             -
             container_port                           container port for service discovery registration
             -
                                       Choices:
   state                               • present      The desired state of the service
   - / required                        • absent
                                       • deleting
   task_definition                                    The task definition the service will run. This parameter is required when state=present
   -
   validate_certs                      Choices:
   boolean                             • no           When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0.
                                       • yes ←

NOTES                   *ecs_service-notes*

   Note

     • the service role specified must be assumable (i.e. have a trust relationship for the ecs service, ecs.amazonaws.com)
     • for details of the parameters and returns see https://boto3.readthedocs.io/en/latest/reference/services/ecs.html
     • An IAM role must have been previously created
     • If parameters are not set within the module, the following environment variables can be used in decreasing order of precedence AWS_URL or EC2_URL, AWS_ACCESS_KEY_ID or AWS_ACCESS_KEY or
       EC2_ACCESS_KEY, AWS_SECRET_ACCESS_KEY or AWS_SECRET_KEY or EC2_SECRET_KEY, AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN, AWS_REGION or EC2_REGION
     • Ansible uses the boto configuration file (typically ~/.boto) if no credentials are provided. See https://boto.readthedocs.io/en/latest/boto_config_tut.html
     • AWS_REGION or EC2_REGION can be typically be used to specify the AWS region, when required, but this can also be configured in the boto config file

EXAMPLES                   *ecs_service-examples*

 # Note: These examples do not set authentication details, see the AWS Guide for details.

 # Basic provisioning example
 - ecs_service:
     state: present
     name: console-test-service
     cluster: new_cluster
     task_definition: 'new_cluster-task:1'
     desired_count: 0

 - name: create ECS service on VPC network
   ecs_service:
     state: present
     name: console-test-service
     cluster: new_cluster
     task_definition: 'new_cluster-task:1'
     desired_count: 0
     network_configuration:
       subnets:
       - subnet-abcd1234
       security_groups:
       - sg-aaaa1111
       - my_security_group

 # Simple example to delete
 - ecs_service:
     name: default
     state: absent
     cluster: new_cluster

 # With custom deployment configuration (added in version 2.3), placement constraints and strategy (added in version 2.4)
 - ecs_service:
     state: present
     name: test-service
     cluster: test-cluster
     task_definition: test-task-definition
     desired_count: 3
     deployment_configuration:
       minimum_healthy_percent: 75
       maximum_percent: 150
     placement_constraints:
       - type: memberOf
         expression: 'attribute:flavor==test'
     placement_strategy:
       - type: binpack
         field: memory

RETURNED FACTS                   *ecs_service-returned facts*

   Facts returned by this module are added/updated in the hostvars host facts and can be referenced by name just like any other host fact. They do not need to be registered in order to use them.

    Fact                 Returned                                                                                    Description
   service when service existed and was deleted Details of deleted service in the same structure described above for service creation.
   complex

RETURN VALUES                   *ecs_service-return values*

   Common return values are documented here, the following are the fields unique to this module:

              Key            Returned                                                                           Description
                             when
   service                   creating Details of created service.
   complex                   a
                             service
     clusterArn              always   The Amazon Resource Name (ARN) of the of the cluster that hosts the service.
     string
     deploymentConfiguration always   dictionary of deploymentConfiguration
     complex
       maximumPercent        always   maximumPercent param
       integer
       minimumHealthyPercent always   minimumHealthyPercent param
       integer
     deployments             always   list of service deployments
     list of complex
     desiredCount            always   The desired number of instantiations of the task definition to keep running on the service.
     integer
     events                  always   list of service events
     list of complex
     loadBalancers           always   A list of load balancer objects
     complex
       containerName         always   The name of the container to associate with the load balancer.
       string
       containerPort         always   The port on the container to associate with the load balancer.
       integer
       loadBalancerName      always   the name
       string
     pendingCount            always   The number of tasks in the cluster that are in the PENDING state.
     integer
     placementConstraints    always   List of placement constraints objects
     list of complex
       expression            always   A cluster query language expression to apply to the constraint. Note you cannot specify an expression if the constraint type is distinctInstance.
       string
       type                  always   The type of constraint. Valid values are distinctInstance and memberOf.
       string
     placementStrategy       always   List of placement strategy objects
     list of complex
       field                          The field to apply the placement strategy against. For the spread placement strategy, valid values are instanceId (or host, which has the same effect), or any
       string                always   platform or custom attribute that is applied to a container instance, such as attribute:ecs.availability-zone. For the binpack placement strategy, valid values
                                      are CPU and MEMORY.
       type                  always   The type of placement strategy. Valid values are random, spread and binpack.
       string
     runningCount            always   The number of tasks in the cluster that are in the RUNNING state.
     integer
     serviceArn              always   The Amazon Resource Name (ARN) that identifies the service. The ARN contains the arn:aws:ecs namespace, followed by the region of the service, the AWS account
     string                           ID of the service owner, the service namespace, and then the service name. For example, arn:aws:ecs:region :012345678910 :service/my-service .
     serviceName             always   A user-generated string used to identify the service
     string
     status                  always   The valid values are ACTIVE, DRAINING, or INACTIVE.
     string
     taskDefinition          always   The ARN of a task definition to use for tasks in the service.
     string

STATUS                   *ecs_service-status*

     • This module is not guaranteed to have a backwards compatible interface. [preview]
     • This module is maintained by the Ansible Community. [community]

     • Mark Chance (@Java1Guy)
     • Darek Kaczynski (@kaczynskid)
     • Stephane Maarek (@simplesteph)
     • Zac Blazic (@zacblazic)

   Hint

   If you notice any issues in this documentation, you can edit this document to improve it.

   ══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

MORE INFO                          *ecs_service-moreinfo*
>
All arguments are omni-completed, but if you really want to see the online docs:
https://docs.ansible.com/ansible/latest/modules/ecs_service_module.html
