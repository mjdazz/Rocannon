SYNOPSIS                   *elb_target_info*

     • This module will search through every target group in a region to find which ones have registered a given instance ID or IP.
     • This module was called elb_target_facts before Ansible 2.9. The usage did not change.

   Aliases: elb_target_facts

REQUIREMENTS                   *elb_target_info-requirements*

   The below requirements are needed on the host that executes this module.

     • boto
     • boto3
     • botocore
     • python >= 2.6

PARAMETERS                   *elb_target_info-parameters*

            Parameter           Choices/Defaults                                                                       Comments
   aws_access_key                                AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.
   string                                        aliases: ec2_access_key, access_key
   aws_secret_key                                AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.
   string                                        aliases: ec2_secret_key, secret_key
   debug_botocore_endpoint_logs   Choices:       Use a botocore.endpoint logger to parse the unique (rather than total) "resource:action" API calls made during a task, outputing the set to the
   boolean                        • no ←         resource_actions key in the task results. Use the aws_resource_action callback to output to total list made during a playbook. The
   added in 2.8                   • yes          ANSIBLE_DEBUG_BOTOCORE_LOGS environment variable may also be used.
   ec2_url                                       Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required.
   string                                        Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.
   get_unused_target_groups       Choices:
   boolean                        • no           Whether or not to get target groups not used by any load balancers.
                                  • yes ←
   instance_id                                   What instance ID to get information for.
   string / required
   profile                                       Uses a boto profile. Only works with boto >= 2.24.0.
   string
   region                                        The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See
   string                                        http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region
                                                 aliases: aws_region, ec2_region
   security_token                                AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.
   string                                        aliases: access_token
   validate_certs                 Choices:
   boolean                        • no           When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0.
                                  • yes ←

NOTES                   *elb_target_info-notes*

   Note

     • If parameters are not set within the module, the following environment variables can be used in decreasing order of precedence AWS_URL or EC2_URL, AWS_ACCESS_KEY_ID or AWS_ACCESS_KEY or
       EC2_ACCESS_KEY, AWS_SECRET_ACCESS_KEY or AWS_SECRET_KEY or EC2_SECRET_KEY, AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN, AWS_REGION or EC2_REGION
     • Ansible uses the boto configuration file (typically ~/.boto) if no credentials are provided. See https://boto.readthedocs.io/en/latest/boto_config_tut.html
     • AWS_REGION or EC2_REGION can be typically be used to specify the AWS region, when required, but this can also be configured in the boto config file

EXAMPLES                   *elb_target_info-examples*

 # practical use case - dynamically deregistering and reregistering nodes

   - name: Get EC2 Metadata
     action: ec2_metadata_facts

   - name: Get initial list of target groups
     delegate_to: localhost
     elb_target_info:
       instance_id: "{{ ansible_ec2_instance_id }}"
       region: "{{ ansible_ec2_placement_region }}"
     register: target_info

   - name: save fact for later
     set_fact:
       original_tgs: "{{ target_info.instance_target_groups }}"

   - name: Deregister instance from all target groups
     delegate_to: localhost
     elb_target:
         target_group_arn: "{{ item.0.target_group_arn }}"
         target_port: "{{ item.1.target_port }}"
         target_az: "{{ item.1.target_az }}"
         target_id: "{{ item.1.target_id }}"
         state: absent
         target_status: "draining"
         region: "{{ ansible_ec2_placement_region }}"
     with_subelements:
       - "{{ original_tgs }}"
       - "targets"

     # This avoids having to wait for 'elb_target' to serially deregister each
     # target group.  An alternative would be to run all of the 'elb_target'
     # tasks async and wait for them to finish.

   - name: wait for all targets to deregister simultaneously
     delegate_to: localhost
     elb_target_info:
       get_unused_target_groups: false
       instance_id: "{{ ansible_ec2_instance_id }}"
       region: "{{ ansible_ec2_placement_region }}"
     register: target_info
     until: (target_info.instance_target_groups | length) == 0
     retries: 60
     delay: 10

   - name: reregister in elbv2s
     elb_target:
       region: "{{ ansible_ec2_placement_region }}"
       target_group_arn: "{{ item.0.target_group_arn }}"
       target_port: "{{ item.1.target_port }}"
       target_az: "{{ item.1.target_az }}"
       target_id: "{{ item.1.target_id }}"
       state: present
       target_status: "initial"
     with_subelements:
       - "{{ original_tgs }}"
       - "targets"

   # wait until all groups associated with this instance are 'healthy' or
   # 'unused'
   - name: wait for registration
     elb_target_info:
       get_unused_target_groups: false
       instance_id: "{{ ansible_ec2_instance_id }}"
       region: "{{ ansible_ec2_placement_region }}"
     register: target_info
     until: (target_info.instance_target_groups |
             map(attribute='targets') |
             flatten |
             map(attribute='target_health') |
             rejectattr('state', 'equalto', 'healthy') |
             rejectattr('state', 'equalto', 'unused') |
             list |
             length) == 0
     retries: 61
     delay: 10

 # using the target groups to generate AWS CLI commands to reregister the
 # instance - useful in case the playbook fails mid-run and manual
 #            rollback is required
   - name: "reregistration commands: ELBv2s"
     debug:
       msg: >
              aws --region {{ansible_ec2_placement_region}} elbv2
              register-targets --target-group-arn {{item.target_group_arn}}
              --targets{%for target in item.targets%}
              Id={{target.target_id}},
              Port={{target.target_port}}{%if target.target_az%},AvailabilityZone={{target.target_az}}
              {%endif%}
              {%endfor%}
     loop: "{{target_info.instance_target_groups}}"

RETURN VALUES                   *elb_target_info-return values*

   Common return values are documented here, the following are the fields unique to this module:

            Key              Returned                                                                            Description
   instance_target_groups always         a list of target groups to which the instance is registered to
   complex
      target_group_arn                   The ARN of the target group
      string              always         Sample:
                                         ['arn:aws:elasticloadbalancing:eu-west-1:111111111111:targetgroup/target-group/deadbeefdeadbeef']
      target_group_type                  Which target type is used for this group
      string              always         Sample:
                                         ['ip', 'instance']
      targets             always         A list of targets that point to this instance ID
      complex
                          when an AZ is  which availability zone is explicitly associated with this target
           target_az      associated     Sample:
           string         with this      ['us-west-2a']
                          instance
           target_health  always         the target health description (see https://boto3.readthedocs.io/en/latest/
           complex                       reference/services/elbv2.html#ElasticLoadBalancingv2.Client.describe_target_health) for all possible values
              description if             description of target health
              -           state!=present Sample:
                                         ['Target desregistration is in progress']
              reason      if             reason code for target health
              -           state!=healthy Sample:
                                         ['Target.Deregistration in progress']
              state                      health state
              -           always         Sample:
                                         ['healthy', 'draining', 'initial', 'unhealthy', 'unused', 'unavailable']
           target_id                     the target ID referring to this instance
           string         always         Sample:
                                         ['i-deadbeef', '1.2.3.4']
           target_port                   which port this target is listening on
           string         always         Sample:
                                         [80]

STATUS                   *elb_target_info-status*

     • This module is not guaranteed to have a backwards compatible interface. [preview]
     • This module is maintained by the Ansible Community. [community]

     • Yaakov Kuperman (@yaakov-github)

   Hint

   If you notice any issues in this documentation, you can edit this document to improve it.

   ══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

MORE INFO                          *elb_target_info-moreinfo*
>
All arguments are omni-completed, but if you really want to see the online docs:
https://docs.ansible.com/ansible/latest/modules/elb_target_info_module.html
