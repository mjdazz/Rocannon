SYNOPSIS                   *assemble*

     • Assembles a configuration file from fragments.
     • Often a particular program will take a single configuration file and does not support a conf.d style structure where it is easy to build up the configuration from multiple sources. assemble
       will take a directory of files that can be local or have already been transferred to the system, and concatenate them together to produce a destination file.
     • Files are assembled in string sorting order.
     • Puppet calls this idea fragments.

PARAMETERS                   *assemble-parameters*

     Parameter   Choices/Defaults                                                                              Comments
                                  The attributes the resulting file or directory should have.
   attributes                     To get supported flags look at the man page for chattr on the target system.
   string                         This string should contain the attributes in the same order as the one displayed by lsattr.
                                  The = operator is assumed as default, otherwise + or - operators need to be included in the string.
                                  aliases: attr
   backup          Choices:
   boolean         • no ←         Create a backup file (if yes), including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.
                   • yes
   decrypt         Choices:
   boolean         • no           This option controls the autodecryption of source files using vault.
   added in 2.4    • yes ←
   delimiter                      A delimiter to separate the file contents.
   string
   dest
   path /                         A file to create using the concatenation of all of the source files.
   required
   group                          Name of the group that should own the file/directory, as would be fed to chown.
   string
   ignore_hidden   Choices:
   boolean         • no ←         A boolean that controls if files that start with a '.' will be included or not.
                   • yes
                                  The permissions the resulting file or directory should have.
                                  For those used to /usr/bin/chmod remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an
   mode                           octal number (like 0644 or 01777) or quote it (like '644' or '1777') so Ansible receives a string and can do its own conversion from string into number.
   string                         Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.
                                  As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, u+rwx or u=rw,g=r,o=r).
                                  As of Ansible 2.6, the mode may also be the special string preserve.
                                  When set to preserve the file will be given the same permissions as the source file.
   owner                          Name of the user that should own the file/directory, as would be fed to chown.
   string
                                  Assemble files only if regex matches the filename.
   regexp                         If not set, all files are assembled.
   string                         Every "\" (backslash) must be escaped as "\\" to comply to YAML syntax.
                                  Uses Python regular expressions.
   remote_src      Choices:       If no, it will search for src at originating/master machine.
   boolean         • no ←         If yes, it will go to the remote/target machine for the src.
                   • yes
   selevel       Default:         The level part of the SELinux file context.
   string        "s0"             This is the MLS/MCS attribute, sometimes known as the range.
                                  When set to _default, it will use the level portion of the policy if available.
   serole                         The role part of the SELinux file context.
   string                         When set to _default, it will use the role portion of the policy if available.
   setype                         The type part of the SELinux file context.
   string                         When set to _default, it will use the type portion of the policy if available.
   seuser                         The user part of the SELinux file context.
   string                         By default it uses the system policy, where applicable.
                                  When set to _default, it will use the user portion of the policy if available.
   src
   path /                         An already existing directory full of source files.
   required
                                  Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target file.
                                  By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target files, but sometimes systems are configured or just
   unsafe_writes   Choices:       broken in ways that prevent this. One example is docker mounted files, which cannot be updated atomically from inside the container and can only be written in an
   boolean         • no ←         unsafe manner.
                   • yes          This option allows Ansible to fall back to unsafe methods of updating files when atomic operations fail (however, it doesn't force Ansible to perform unsafe
                                  writes).
                                  IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption.
   validate                       The validation command to run before copying into place.
   string                         The path to the file to validate is passed in via '%s' which must be present as in the sshd example below.
                                  The command is passed securely so shell features like expansion and pipes won't work.

SEE ALSO                   *assemble-see also*

   See also

   copy – Copy files to remote locations
   The official documentation on the copy module.

   template – Template a file out to a remote server
   The official documentation on the template module.

   win_copy – Copies files to remote locations on windows hosts
   The official documentation on the win_copy module.

EXAMPLES                   *assemble-examples*

 - name: Assemble from fragments from a directory
   assemble:
     src: /etc/someapp/fragments
     dest: /etc/someapp/someapp.conf

 - name: Inserted provided delimiter in between each fragment
   assemble:
     src: /etc/someapp/fragments
     dest: /etc/someapp/someapp.conf
     delimiter: '### START FRAGMENT ###'

 - name: Assemble a new "sshd_config" file into place, after passing validation with sshd
   assemble:
     src: /etc/ssh/conf.d/
     dest: /etc/ssh/sshd_config
     validate: /usr/sbin/sshd -t -f %s

STATUS                   *assemble-status*

     • This module is guaranteed to have backward compatible interface changes going forward. [stableinterface]
     • This module is maintained by the Ansible Core Team. [core]

RED HAT SUPPORT                   *assemble-red hat support*

     • Stephen Fromm (@sfromm)

   Hint

   If you notice any issues in this documentation, you can edit this document to improve it.

   ══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

MORE INFO                          *assemble-moreinfo*
>
All arguments are omni-completed, but if you really want to see the online docs:
https://docs.ansible.com/ansible/latest/modules/assemble_module.html
