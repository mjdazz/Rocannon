SYNOPSIS                   *idrac_server_config_profile*

     • Export the Server Configuration Profile (SCP) from the iDRAC or Import from a network share or a local file.

REQUIREMENTS                   *idrac_server_config_profile-requirements*

   The below requirements are needed on the host that executes this module.

     • omsdk
     • python >= 2.7.5

PARAMETERS                   *idrac_server_config_profile-parameters*

        Parameter       Choices/Defaults                                                                           Comments
   command                Choices:       If import, will perform SCP import operations.
   -                      • import       If export, will perform SCP export operations.
                          • export ←
   end_host_power_state   Choices:       This option is applicable for import command.
   -                      • On ←         If On, End host power state is on.
                          • Off          If Off, End host power state is off.
   export_format          Choices:
   -                      • JSON         Specify the output file format. This option is applicable for export command.
                          • XML ←
                          Choices:
   export_use             • Default ←    Specify the type of server configuration profile (SCP) to be exported. This option is applicable for export command.
   -                      • Clone
                          • Replace
   idrac_ip                              iDRAC IP Address.
   string / required
   idrac_password                        iDRAC user password.
   string / required                     aliases: idrac_pwd
   idrac_port           Default:         iDRAC port.
   integer              443
   idrac_user                            iDRAC username.
   string / required
   job_wait               Choices:
   boolean / required     • no           Whether to wait for job completion or not.
                          • yes
                          Choices:       If ALL, this module will import all components configurations from SCP file.
                          • ALL ←        If IDRAC, this module will import iDRAC configuration from SCP file.
   scp_components         • IDRAC        If BIOS, this module will import BIOS configuration from SCP file.
   -                      • BIOS         If NIC, this module will import NIC configuration from SCP file.
                          • NIC          If RAID, this module will import RAID configuration from SCP file.
                          • RAID
   scp_file                              Server Configuration Profile file name. This option is mandatory for import command.
   string
   share_name                            CIFS or NFS Network Share or a local path.
   string / required
   share_password                        Network share user password. This option is mandatory for CIFS Network Share.
   string                                aliases: share_pwd
   share_user                            Network share user in the format '[email protected]' or 'domain\\user' if user is part of a domain else 'user'. This option is mandatory for CIFS Network
   string                                Share.
                          Choices:       This option is applicable for import command.
   shutdown_type          • Graceful ←   If Graceful, it gracefully shuts down the server.
   -                      • Forced       If Forced, it forcefully shuts down the server.
                          • NoReboot     If NoReboot, it does not reboot the server.

EXAMPLES                   *idrac_server_config_profile-examples*

 ---
 - name: Import Server Configuration Profile from a network share
   idrac_server_config_profile:
     idrac_ip: "192.168.0.1"
     idrac_user: "user_name"
     idrac_password: "user_password"
     command: "import"
     share_name: "192.168.0.2:/share"
     share_user: "share_user_name"
     share_password: "share_user_password"
     scp_file: "scp_filename.xml"
     scp_components: "ALL"
     job_wait: True

 - name: Import Server Configuration Profile from a local path
   idrac_server_config_profile:
     idrac_ip: "192.168.0.1"
     idrac_user: "user_name"
     idrac_password: "user_password"
     command: "import"
     share_name: "/scp_folder"
     share_user: "share_user_name"
     share_password: "share_user_password"
     scp_file: "scp_filename.xml"
     scp_components: "ALL"
     job_wait: True

 - name: Export Server Configuration Profile to a network share
   idrac_server_config_profile:
     idrac_ip: "192.168.0.1"
     idrac_user: "user_name"
     idrac_password: "user_password"
     share_name: "192.168.0.2:/share"
     share_user: "share_user_name"
     share_password: "share_user_password"
     job_wait: False

 - name: Export Server Configuration Profile to a local path
   idrac_server_config_profile:
     idrac_ip: "192.168.0.1"
     idrac_user: "user_name"
     idrac_password: "user_password"
     share_name: "/scp_folder"
     share_user: "share_user_name"
     share_password: "share_user_password"
     job_wait: False

RETURN VALUES                   *idrac_server_config_profile-return values*

   Common return values are documented here, the following are the fields unique to this module:

      Key     Returned                                                                                  Description
   msg                 Status of the import or export SCP job.
   string     always   Sample:
                       Successfully imported the Server Configuration Profile
                       SCP operation job and progress details from the iDRAC.
   scp_status          Sample:
   dictionary success  {'Id': 'JID_XXXXXXXXX', 'JobState': 'Completed', 'JobType': 'ImportConfiguration', 'Message': 'Successfully imported and applied Server Configuration Profile.',
                       'MessageArgs': [], 'MessageId': 'XXX123', 'Name': 'Import Configuration', 'PercentComplete': 100, 'StartTime': 'TIME_NOW', 'Status': 'Success', 'TargetSettingsURI': None,
                       'retval': True}

STATUS                   *idrac_server_config_profile-status*

     • This module is not guaranteed to have a backwards compatible interface. [preview]
     • This module is maintained by the Ansible Community. [community]

     • Jagadeesh N V(@jagadeeshnv)

   Hint

   If you notice any issues in this documentation, you can edit this document to improve it.

   ══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

MORE INFO                          *idrac_server_config_profile-moreinfo*
>
All arguments are omni-completed, but if you really want to see the online docs:
https://docs.ansible.com/ansible/latest/modules/idrac_server_config_profile_module.html
