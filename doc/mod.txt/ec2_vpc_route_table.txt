SYNOPSIS                   *ec2_vpc_route_table*

     • Manage route tables for AWS virtual private clouds

REQUIREMENTS                   *ec2_vpc_route_table-requirements*

   The below requirements are needed on the host that executes this module.

     • python >= 2.6
     • boto

PARAMETERS                   *ec2_vpc_route_table-parameters*

            Parameter           Choices/Defaults                                                                       Comments
   aws_access_key                                AWS access key. If not set then the value of the AWS_ACCESS_KEY_ID, AWS_ACCESS_KEY or EC2_ACCESS_KEY environment variable is used.
   string                                        aliases: ec2_access_key, access_key
   aws_secret_key                                AWS secret key. If not set then the value of the AWS_SECRET_ACCESS_KEY, AWS_SECRET_KEY, or EC2_SECRET_KEY environment variable is used.
   string                                        aliases: ec2_secret_key, secret_key
   debug_botocore_endpoint_logs   Choices:       Use a botocore.endpoint logger to parse the unique (rather than total) "resource:action" API calls made during a task, outputing the set to the
   boolean                        • no ←         resource_actions key in the task results. Use the aws_resource_action callback to output to total list made during a playbook. The
   added in 2.8                   • yes          ANSIBLE_DEBUG_BOTOCORE_LOGS environment variable may also be used.
   ec2_url                                       Url to use to connect to EC2 or your Eucalyptus cloud (by default the module will use EC2 endpoints). Ignored for modules where region is required.
   string                                        Must be specified for all other modules if region is not used. If not set then the value of the EC2_URL environment variable, if any, is used.
   lookup                         Choices:       Look up route table by either tags or by route table ID. Non-unique tag lookup will fail. If no tags are specified then no lookup for an existing
   -                              • tag ←        route table is performed and a new route table will be created. To change tags of a route table you must look up by id.
                                  • id
   profile                                       Uses a boto profile. Only works with boto >= 2.24.0.
   string
   propagating_vgw_ids                           Enable route propagation from virtual gateways specified by ID.
   -
   purge_routes                   Choices:
   boolean                        • no           Purge existing routes that are not found in routes.
                                  • yes ←
   purge_subnets                  Choices:
   boolean                        • no           Purge existing subnets that are not found in subnets. Ignored unless the subnets option is supplied.
                                  • yes ←
   purge_tags                     Choices:
   boolean                        • no ←         Purge existing tags that are not found in route table
   added in 2.5                   • yes
   region                                        The AWS region to use. If not specified then the value of the AWS_REGION or EC2_REGION environment variable, if any, is used. See
   string                                        http://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region
                                                 aliases: aws_region, ec2_region
   route_table_id                                The ID of the route table to update or delete.
   -
   routes                                        List of routes in the route table. Routes are specified as dicts containing the keys 'dest' and one of 'gateway_id', 'instance_id',
   -                                             'network_interface_id', or 'vpc_peering_connection_id'. If 'gateway_id' is specified, you can refer to the VPC's IGW by using the value 'igw'.
                                                 Routes are required for present states.
   security_token                                AWS STS security token. If not set then the value of the AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN environment variable is used.
   string                                        aliases: access_token
   state                          Choices:
   -                              • present ←    Create or destroy the VPC route table
                                  • absent
   subnets                                       An array of subnets to add to this route table. Subnets may be specified by either subnet ID, Name tag, or by a CIDR such as '10.0.0.0/24'.
   -
   tags                                          A dictionary of resource tags of the form: { tag1: value1, tag2: value2 }. Tags are used to uniquely identify route tables within a VPC when the
   -                                             route_table_id is not supplied.
                                                 aliases: resource_tags
   validate_certs                 Choices:
   boolean                        • no           When set to "no", SSL certificates will not be validated for boto versions >= 2.6.0.
                                  • yes ←
   vpc_id                                        VPC ID of the VPC in which to create the route table.
   - / required

NOTES                   *ec2_vpc_route_table-notes*

   Note

     • If parameters are not set within the module, the following environment variables can be used in decreasing order of precedence AWS_URL or EC2_URL, AWS_ACCESS_KEY_ID or AWS_ACCESS_KEY or
       EC2_ACCESS_KEY, AWS_SECRET_ACCESS_KEY or AWS_SECRET_KEY or EC2_SECRET_KEY, AWS_SECURITY_TOKEN or EC2_SECURITY_TOKEN, AWS_REGION or EC2_REGION
     • Ansible uses the boto configuration file (typically ~/.boto) if no credentials are provided. See https://boto.readthedocs.io/en/latest/boto_config_tut.html
     • AWS_REGION or EC2_REGION can be typically be used to specify the AWS region, when required, but this can also be configured in the boto config file

EXAMPLES                   *ec2_vpc_route_table-examples*

 # Note: These examples do not set authentication details, see the AWS Guide for details.

 # Basic creation example:
 - name: Set up public subnet route table
   ec2_vpc_route_table:
     vpc_id: vpc-1245678
     region: us-west-1
     tags:
       Name: Public
     subnets:
       - "{{ jumpbox_subnet.subnet.id }}"
       - "{{ frontend_subnet.subnet.id }}"
       - "{{ vpn_subnet.subnet_id }}"
     routes:
       - dest: 0.0.0.0/0
         gateway_id: "{{ igw.gateway_id }}"
   register: public_route_table

 - name: Set up NAT-protected route table
   ec2_vpc_route_table:
     vpc_id: vpc-1245678
     region: us-west-1
     tags:
       Name: Internal
     subnets:
       - "{{ application_subnet.subnet.id }}"
       - 'Database Subnet'
       - '10.0.0.0/8'
     routes:
       - dest: 0.0.0.0/0
         instance_id: "{{ nat.instance_id }}"
   register: nat_route_table

 - name: delete route table
   ec2_vpc_route_table:
     vpc_id: vpc-1245678
     region: us-west-1
     route_table_id: "{{ route_table.id }}"
     lookup: id
     state: absent

RETURN VALUES                   *ec2_vpc_route_table-return values*

   Common return values are documented here, the following are the fields unique to this module:

                Key                               Returned                                                                         Description
   route_table                    always                                    Route Table result
   complex
     associations                 always                                    List of subnets associated with the route table
     complex
       main                       always                                    Whether this is the main route table
       boolean
       route_table_association_id                                           ID of association between route table and subnet
       string                     always                                    Sample:
                                                                            rtbassoc-ab47cfc3
       route_table_id                                                       ID of the route table
       string                     always                                    Sample:
                                                                            rtb-bf779ed7
       subnet_id                                                            ID of the subnet
       string                     always                                    Sample:
                                                                            subnet-82055af9
     id                                                                     ID of the route table (same as route_table_id for backwards compatibility)
     string                       always                                    Sample:
                                                                            rtb-bf779ed7
     propagating_vgws             always                                    List of Virtual Private Gateways propagating routes
     list
     route_table_id                                                         ID of the route table
     string                       always                                    Sample:
                                                                            rtb-bf779ed7
     routes                       always                                    List of routes in the route table
     complex
       destination_cidr_block                                               CIDR block of destination
       string                     always                                    Sample:
                                                                            10.228.228.0/22
       gateway_id                                                           ID of the gateway
       string                     when gateway is local or internet gateway Sample:
                                                                            local
       instance_id                                                          ID of a NAT instance
       string                     when the route is via an EC2 instance     Sample:
                                                                            i-abcd123456789
       instance_owner_id                                                    AWS account owning the NAT instance
       string                     when the route is via an EC2 instance     Sample:
                                                                            123456789012
       nat_gateway_id                                                       ID of the NAT gateway
       string                     when the route is via a NAT gateway       Sample:
                                                                            local
       origin                                                               mechanism through which the route is in the table
       string                     always                                    Sample:
                                                                            CreateRouteTable
       state                                                                state of the route
       string                     always                                    Sample:
                                                                            active
     tags                                                                   Tags applied to the route table
     dictionary                   always                                    Sample:
                                                                            {'Name': 'Public route table', 'Public': 'true'}
     vpc_id                                                                 ID for the VPC in which the route lives
     string                       always                                    Sample:
                                                                            vpc-6e2d2407

STATUS                   *ec2_vpc_route_table-status*

     • This module is guaranteed to have backward compatible interface changes going forward. [stableinterface]
     • This module is maintained by the Ansible Community. [community]

     • Robert Estelle (@erydo)
     • Rob White (@wimnat)
     • Will Thames (@willthames)

   Hint

   If you notice any issues in this documentation, you can edit this document to improve it.

   ══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

MORE INFO                          *ec2_vpc_route_table-moreinfo*
>
All arguments are omni-completed, but if you really want to see the online docs:
https://docs.ansible.com/ansible/latest/modules/ec2_vpc_route_table_module.html
