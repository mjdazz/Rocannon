SYNOPSIS                   *aci_rest*

     • Enables the management of the Cisco ACI fabric through direct access to the Cisco APIC REST API.
     • Thanks to the idempotent nature of the APIC, this module is idempotent and reports changes.

REQUIREMENTS                   *aci_rest-requirements*

   The below requirements are needed on the host that executes this module.

     • lxml (when using XML payload)
     • xmljson >= 0.1.8 (when using XML payload)
     • python 2.7+ (when using xmljson)

PARAMETERS                   *aci_rest-parameters*

       Parameter     Choices/Defaults                                                                            Comments
                                      The X.509 certificate name attached to the APIC AAA user used for signature-based authentication.
   certificate_name                   If a private_key filename was provided, this defaults to the private_key basename, without extension.
   string                             If PEM-formatted content was provided for private_key, this defaults to the username value.
                                      aliases: cert_name
   content                            When used instead of src, sets the payload of the API request directly.
   raw                                This may be convenient to template simple requests.
                                      For anything complex use the template lookup plugin (see examples) or the template module with parameter src.
   host                               IP Address or hostname of APIC resolvable by Ansible control host.
   string / required                  aliases: hostname
                       Choices:       The HTTP method of the request.
   method              • delete       Using delete is typically used for deleting objects.
   string              • get ←        Using get is typically used for querying objects.
                       • post         Using post is typically used for modifying objects.
                                      aliases: action
                       Choices:       Influence the output of this ACI module.
   output_level        • debug        normal means the standard output, incl. current dict
   string              • info         info adds informational output, incl. previous, proposed and sent dicts
                       • normal ←     debug adds debugging output, incl. filter_string, method, response, status and url information
   password                           The password to use for authentication.
   string / required                  This option is mutual exclusive with private_key. If private_key is provided too, it will be used instead.
   path                               URI being used to execute API calls.
   string / required                  Must end in .xml or .json.
                                      aliases: uri
   port                               Port number to be used for REST connection.
   integer                            The default value depends on parameter use_ssl.
                                      Either a PEM-formatted private key file or the private key content used for signature-based authentication.
   private_key                        This value also influences the default certificate_name that is used.
   string / required                  This option is mutual exclusive with password. If password is provided too, it will be ignored.
                                      aliases: cert_key
   src                                Name of the absolute path of the filename that includes the body of the HTTP request being sent to the ACI fabric.
   path                               If you require a templated payload, use the content parameter together with the template lookup plugin, or use template.
                                      aliases: config_file
   timeout           Default:         The socket level timeout in seconds.
   integer           30
   use_proxy           Choices:
   boolean             • no           If no, it will not use a proxy, even if one is defined in an environment variable on the target hosts.
                       • yes ←
   use_ssl             Choices:
   boolean             • no           If no, an HTTP connection will be used instead of the default HTTPS connection.
                       • yes ←
   username          Default:         The username to use for authentication.
   string            "admin"          aliases: user
   validate_certs      Choices:       If no, SSL certificates will not be validated.
   boolean             • no           This should only set to no when used on personally controlled sites using self-signed certificates.
                       • yes ←

NOTES                   *aci_rest-notes*

   Note

     • Certain payloads are known not to be idempotent, so be careful when constructing payloads, e.g. using status="created" will cause idempotency issues, use status="modified" instead. More
       information in the ACI documentation.
     • Certain payloads (and used paths) are known to report no changes happened when changes did happen. This is a known APIC problem and has been reported to the vendor. A workaround for this
       issue exists. More information in the ACI documentation.
     • XML payloads require the lxml and xmljson python libraries. For JSON payloads nothing special is needed.

See Also¶

   See also

   aci_tenant – Manage tenants (fv:Tenant)
   The official documentation on the aci_tenant module.

   Cisco APIC REST API Configuration Guide
   More information about the APIC REST API.

   Cisco ACI Guide
   Detailed information on how to manage your ACI infrastructure using Ansible.

   Developing Cisco ACI modules
   Detailed guide on how to write your own Cisco ACI modules to contribute.

EXAMPLES                   *aci_rest-examples*

 - name: Add a tenant using certificate authentication
   aci_rest:
     host: apic
     username: admin
     private_key: pki/admin.key
     method: post
     path: /api/mo/uni.xml
     src: /home/cisco/ansible/aci/configs/aci_config.xml
   delegate_to: localhost

 - name: Add a tenant from a templated payload file from templates/
   aci_rest:
     host: apic
     username: admin
     private_key: pki/admin.key
     method: post
     path: /api/mo/uni.xml
     content: "{{ lookup('template', 'aci/tenant.xml.j2') }}"
   delegate_to: localhost

 - name: Add a tenant using inline YAML
   aci_rest:
     host: apic
     username: admin
     private_key: pki/admin.key
     validate_certs: no
     path: /api/mo/uni.json
     method: post
     content:
       fvTenant:
         attributes:
           name: Sales
           descr: Sales department
   delegate_to: localhost

 - name: Add a tenant using a JSON string
   aci_rest:
     host: apic
     username: admin
     private_key: pki/admin.key
     validate_certs: no
     path: /api/mo/uni.json
     method: post
     content:
       {
         "fvTenant": {
           "attributes": {
             "name": "Sales",
             "descr": "Sales department"
           }
         }
       }
   delegate_to: localhost

 - name: Add a tenant using an XML string
   aci_rest:
     host: apic
     username: admin
     private_key: pki/{{ aci_username }}.key
     validate_certs: no
     path: /api/mo/uni.xml
     method: post
     content: '<fvTenant name="Sales" descr="Sales departement"/>'
   delegate_to: localhost

 - name: Get tenants using password authentication
   aci_rest:
     host: apic
     username: admin
     password: SomeSecretPassword
     method: get
     path: /api/node/class/fvTenant.json
   delegate_to: localhost
   register: query_result

 - name: Configure contracts
   aci_rest:
     host: apic
     username: admin
     private_key: pki/admin.key
     method: post
     path: /api/mo/uni.xml
     src: /home/cisco/ansible/aci/configs/contract_config.xml
   delegate_to: localhost

 - name: Register leaves and spines
   aci_rest:
     host: apic
     username: admin
     private_key: pki/admin.key
     validate_certs: no
     method: post
     path: /api/mo/uni/controller/nodeidentpol.xml
     content: |
       <fabricNodeIdentPol>
         <fabricNodeIdentP name="{{ item.name }}" nodeId="{{ item.nodeid }}" status="{{ item.status }}" serial="{{ item.serial }}"/>
       </fabricNodeIdentPol>
   with_items:
   - '{{ apic_leavesspines }}'
   delegate_to: localhost

 - name: Wait for all controllers to become ready
   aci_rest:
     host: apic
     username: admin
     private_key: pki/admin.key
     validate_certs: no
     path: /api/node/class/topSystem.json?query-target-filter=eq(topSystem.role,"controller")
   register: apics
   until: "'totalCount' in apics and apics.totalCount|int >= groups['apic']|count"
   retries: 120
   delay: 30
   delegate_to: localhost
   run_once: yes

RETURN VALUES                   *aci_rest-return values*

   Common return values are documented here, the following are the fields unique to this module:

      Key      Returned                                                                                   Description
   error_code             The REST ACI return code, useful for troubleshooting on failure
   integer    always      Sample:
                          122
   error_text             The REST ACI descriptive text, useful for troubleshooting on failure
   string     always      Sample:
                          unknown managed object class foo
   imdata                 Converted output returned by the APIC REST (register this for post-processing)
   string     always      Sample:
                          [{'error': {'attributes': {'code': '122', 'text': 'unknown managed object class foo'}}}]
   payload                The (templated) payload send to the APIC REST API (xml or json)
   string     always      Sample:
                          <foo bar="boo"/>
   raw                    The raw output returned by the APIC REST API (xml or json)
   string     parse error Sample:
                          <?xml version="1.0" encoding="UTF-8"?><imdata totalCount="1"><error code="122" text="unknown managed object class foo"/></imdata>
   response               HTTP response string
   string     always      Sample:
                          HTTP Error 400: Bad Request
   status                 HTTP status code
   integer    always      Sample:
                          400
   totalCount             Number of items in the imdata array
   string     always      Sample:
                          0
   url                    URL used for APIC REST call
   string     success     Sample:
                          https://1.2.3.4/api/mo/uni/tn-[Dag].json?rsp-subtree=modified

STATUS                   *aci_rest-status*

     • This module is not guaranteed to have a backwards compatible interface. [preview]
     • This module is maintained by an Ansible Partner. [certified]

     • Dag Wieers (@dagwieers)

   Hint

   If you notice any issues in this documentation, you can edit this document to improve it.

   ══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

MORE INFO                          *aci_rest-moreinfo*
>
All arguments are omni-completed, but if you really want to see the online docs:
https://docs.ansible.com/ansible/latest/modules/aci_rest_module.html
