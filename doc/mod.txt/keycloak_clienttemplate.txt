SYNOPSIS                   *keycloak_clienttemplate*

     • This module allows the administration of Keycloak client templates via the Keycloak REST API. It requires access to the REST API via OpenID Connect; the user connecting and the client being
       used must have the requisite access rights. In a default Keycloak installation, admin-cli and an admin user would work, as would a separate client definition with the scope tailored to your
       needs and a user having the expected roles.
     • The names of module options are snake_cased versions of the camelCase ones found in the Keycloak API and its documentation at http://www.keycloak.org/docs-api/3.3/rest-api/
     • The Keycloak API does not always enforce for only sensible settings to be used – you can set SAML-specific settings on an OpenID Connect client for instance and vice versa. Be careful. If
       you do not specify a setting, usually a sensible default is chosen.

PARAMETERS                   *keycloak_clienttemplate-parameters*

       Parameter       Choices/Defaults                                                                            Comments
   attributes                            A dict of further attributes for this client template. This can contain various configuration settings, though in the default installation of Keycloak as of
   -                                     3.4, none are documented or known, so this is usually empty.
   auth_client_id     Default:           OpenID Connect client_id to authenticate to the API with.
   string / required  "admin-cli"
   auth_client_secret                    Client Secret to use in conjunction with auth_client_id (if required).
   string
   auth_keycloak_url                     URL to the Keycloak instance.
   string / required                     aliases: url
   auth_password                         Password to authenticate for API access with.
   string / required                     aliases: password
   auth_realm                            Keycloak realm name to authenticate to for API access.
   string / required
   auth_username                         Username to authenticate for API access with.
   string / required                     aliases: username
   description                           Description of the client template in Keycloak
   -
   full_scope_allowed   Choices:
   boolean              • no             Is the "Full Scope Allowed" feature set for this client template or not. This is 'fullScopeAllowed' in the Keycloak REST API.
                        • yes
   id                                    Id of client template to be worked on. This is usually a UUID.
   -
   name                                  Name of the client template
   -
   protocol             Choices:
   -                    • openid-connect Type of client template (either openid-connect or saml.
                        • saml
   protocol_mappers                      a list of dicts defining protocol mappers for this client template. This is 'protocolMappers' in the Keycloak REST API.
   -
      config                             Dict specifying the configuration options for the protocol mapper; the contents differ depending on the value of protocolMapper and are not documented other
      -                                  than by the source of the mappers and its parent class(es). An example is given below. It is easiest to obtain valid config values by dumping an
                                         already-existing protocol mapper configuration through check-mode in the "existing" field.
      consentRequired                    Specifies whether a user needs to provide consent to a client for this mapper to be active.
      -
      consentText                        The human-readable name of the consent the user is presented to accept.
      -
      id                                 Usually a UUID specifying the internal ID of this protocol mapper instance.
      -
      name                               The name of this protocol mapper.
      -
      protocol          Choices:
      -                 • openid-connect is either 'openid-connect' or 'saml', this specifies for which protocol this protocol mapper is active.
                        • saml
                                         The Keycloak-internal name of the type of this protocol-mapper. While an exhaustive list is impossible to provide since this may be extended through SPIs by
                                         the user of Keycloak, by default Keycloak as of 3.4 ships with at least
                                         docker-v2-allow-all-mapper
                                         oidc-address-mapper
                                         oidc-full-name-mapper
                                         oidc-group-membership-mapper
                                         oidc-hardcoded-claim-mapper
                                         oidc-hardcoded-role-mapper
                                         oidc-role-name-mapper
                                         oidc-script-based-protocol-mapper
                                         oidc-sha256-pairwise-sub-mapper
                                         oidc-usermodel-attribute-mapper
      protocolMapper                     oidc-usermodel-client-role-mapper
      -                                  oidc-usermodel-property-mapper
                                         oidc-usermodel-realm-role-mapper
                                         oidc-usersessionmodel-note-mapper
                                         saml-group-membership-mapper
                                         saml-hardcode-attribute-mapper
                                         saml-hardcode-role-mapper
                                         saml-role-list-mapper
                                         saml-role-name-mapper
                                         saml-user-attribute-mapper
                                         saml-user-property-mapper
                                         saml-user-session-note-mapper
                                         An exhaustive list of available mappers on your installation can be obtained on the admin console by going to Server Info -> Providers and looking under
                                         'protocol-mapper'.
   realm                                 Realm this client template is found in.
   -
   state                Choices:         State of the client template
   -                    • present ←      On present, the client template will be created (or updated if it exists already).
                        • absent         On absent, the client template will be removed if it exists
   validate_certs       Choices:
   boolean              • no             Verify TLS certificates (do not disable this in production).
                        • yes ←

NOTES                   *keycloak_clienttemplate-notes*

   Note

     • The Keycloak REST API defines further fields (namely bearerOnly, consentRequired, standardFlowEnabled, implicitFlowEnabled, directAccessGrantsEnabled, serviceAccountsEnabled, publicClient,
       and frontchannelLogout) which, while available with keycloak_client, do not have any effect on Keycloak client-templates and are discarded if supplied with an API request changing
       client-templates. As such, they are not available through this module.

EXAMPLES                   *keycloak_clienttemplate-examples*

 - name: Create or update Keycloak client template (minimal)
   local_action:
     module: keycloak_clienttemplate
     auth_client_id: admin-cli
     auth_keycloak_url: https://auth.example.com/auth
     auth_realm: master
     auth_username: USERNAME
     auth_password: PASSWORD
     realm: master
     name: this_is_a_test

 - name: delete Keycloak client template
   local_action:
     module: keycloak_clienttemplate
     auth_client_id: admin-cli
     auth_keycloak_url: https://auth.example.com/auth
     auth_realm: master
     auth_username: USERNAME
     auth_password: PASSWORD
     realm: master
     state: absent
     name: test01

 - name: Create or update Keycloak client template (with a protocol mapper)
   local_action:
     module: keycloak_clienttemplate
     auth_client_id: admin-cli
     auth_keycloak_url: https://auth.example.com/auth
     auth_realm: master
     auth_username: USERNAME
     auth_password: PASSWORD
     realm: master
     name: this_is_a_test
     protocol_mappers:
       - config:
           access.token.claim: True
           claim.name: "family_name"
           id.token.claim: True
           jsonType.label: String
           user.attribute: lastName
           userinfo.token.claim: True
         consentRequired: True
         consentText: "${familyName}"
         name: family name
         protocol: openid-connect
         protocolMapper: oidc-usermodel-property-mapper
     full_scope_allowed: false
     id: bce6f5e9-d7d3-4955-817e-c5b7f8d65b3f

RETURN VALUES                   *keycloak_clienttemplate-return values*

   Common return values are documented here, the following are the fields unique to this module:

      Key     Returned                                                                                  Description
   end_state           client template representation of client template after module execution (sample is truncated)
   dictionary always   Sample:
                       {'description': 'test01', 'fullScopeAllowed': False, 'id': '9c3712ab-decd-481e-954f-76da7b006e5f', 'name': 'test01', 'protocol': 'saml'}
   existing            client template representation of existing client template (sample is truncated)
   dictionary always   Sample:
                       {'description': 'test01', 'fullScopeAllowed': False, 'id': '9c3712ab-decd-481e-954f-76da7b006e5f', 'name': 'test01', 'protocol': 'saml'}
   msg                 Message as to what action was taken
   string     always   Sample:
                       Client template testclient has been updated
   proposed            client template representation of proposed changes to client template
   dictionary always   Sample:
                       {'name': 'test01'}

STATUS                   *keycloak_clienttemplate-status*

     • This module is not guaranteed to have a backwards compatible interface. [preview]
     • This module is maintained by the Ansible Community. [community]

     • Eike Frost (@eikef)

   Hint

   If you notice any issues in this documentation, you can edit this document to improve it.

   ══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

MORE INFO                          *keycloak_clienttemplate-moreinfo*
>
All arguments are omni-completed, but if you really want to see the online docs:
https://docs.ansible.com/ansible/latest/modules/keycloak_clienttemplate_module.html
