SYNOPSIS                   *postgresql_user*

     • Adds or removes a user (role) from a PostgreSQL server instance (“cluster” in PostgreSQL terminology) and, optionally, grants the user access to an existing database or tables.
     • A user is a role with login privilege.
     • The fundamental function of the module is to create, or delete, users from a PostgreSQL instances. Privilege assignment, or removal, is an optional step, which works on one database at a
       time. This allows for the module to be called several times in the same module to modify the permissions on different databases, or to grant permissions to already existing users.
     • A user cannot be removed until all the privileges have been stripped from the user. In such situation, if the module tries to remove the user it will fail. To avoid this from happening the
       fail_on_user option signals the module to try to remove the user, but if not possible keep going; the module will report if changes happened and separately if the user was removed or not.

REQUIREMENTS                   *postgresql_user-requirements*

   The below requirements are needed on the host that executes this module.

     • psycopg2

PARAMETERS                   *postgresql_user-parameters*

        Parameter       Choices/Defaults                                                                            Comments
   ca_cert                                 Specifies the name of a file containing SSL certificate authority (CA) certificate(s).
   string                                  If the file exists, the server's certificate will be verified to be signed by one of these authorities.
                                           aliases: ssl_rootcert
   conn_limit
   integer                                 Specifies the user (role) connection limit.
   added in 2.4
   db                                      Name of database to connect to and where user's permissions will be granted.
   string                                  aliases: login_db
                         Choices:          Whether the password is stored hashed in the database.
   encrypted             • no              Passwords can be passed already hashed or unhashed, and postgresql ensures the stored password is hashed when encrypted is set.
   boolean               • yes ←           Note: Postgresql 10 and newer doesn't support unhashed passwords.
                                           Previous to Ansible 2.6, this was no by default.
   expires                                 The date at which the user's password is to expire.
   string                                  If set to 'infinity', user's password never expire.
                                           Note that this value should be a valid SQL date and time type.
   fail_on_user          Choices:          If yes, fail when user (role) can't be removed. Otherwise just log and continue.
   boolean               • no              aliases: fail_on_role
                         • yes ←
   groups
   list /                                  The list of groups (roles) that need to be granted to the user.
   elements=string
   added in 2.9
   login_host                              Host running the database.
   string
   login_password                          The password used to authenticate with.
   string
   login_unix_socket                       Path to a Unix domain socket for local connections.
   string
   login_user          Default:            The username used to authenticate with.
   string              "postgres"
   name                                    Name of the user (role) to add or remove.
   string / required                       aliases: user
   no_password_changes   Choices:          If yes, don't inspect database for password changes. Effective when pg_authid is not accessible (such as AWS RDS). Otherwise, make password changes as
   boolean               • no ←            necessary.
                         • yes
                                           Set the user's password, before 1.4 this was required.
                                           Password can be passed unhashed or hashed (MD5-hashed).
   password                                Unhashed password will automatically be hashed when saved into the database if encrypted parameter is set, otherwise it will be save in plain text format.
   string                                  When passing a hashed password it must be generated with the format 'str["md5"] + md5[ password + username ]', resulting in a total of 35 characters. An
                                           easy way to do this is echo "md5$(echo -n 'verysecretpasswordJOE' | md5sum | awk '{print $1}'").
                                           Note that if the provided password string is already in MD5-hashed format, then it is used as-is, regardless of encrypted parameter.
   port                Default:            Database port to connect to.
   integer             5432                aliases: login_port
   priv                                    Slash-separated PostgreSQL privileges string: priv1/priv2, where privileges can be defined for database ( allowed options - 'CREATE', 'CONNECT',
   string                                  'TEMPORARY', 'TEMP', 'ALL'. For example CONNECT ) or for table ( allowed options - 'SELECT', 'INSERT', 'UPDATE', 'DELETE', 'TRUNCATE', 'REFERENCES',
                                           'TRIGGER', 'ALL'. For example table:SELECT ). Mixed example of this string: CONNECT/CREATE/table1:SELECT/table2:INSERT.
                         Choices:
                         • [NO]SUPERUSER
                         • [NO]CREATEROLE  PostgreSQL user attributes string in the format: CREATEDB,CREATEROLE,SUPERUSER.
   role_attr_flags       • [NO]CREATEDB    Note that '[NO]CREATEUSER' is deprecated.
   string                • [NO]INHERIT     To create a simple role for using it like a group, use NOLOGIN flag.
                         • [NO]LOGIN
                         • [NO]REPLICATION
                         • [NO]BYPASSRLS
   session_role                            Switch to session_role after connecting.
   string                                  The specified session_role must be a role that the current login_user is a member of.
   added in 2.8                            Permissions checking for SQL commands is carried out as though the session_role were the one that had logged in originally.
                         Choices:
                         • allow
   ssl_mode              • disable         Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.
   string                • prefer ←        See https://www.postgresql.org/docs/current/static/libpq-ssl.html for more information on the modes.
                         • require         Default of prefer matches libpq default.
                         • verify-ca
                         • verify-full
   state                 Choices:
   string                • absent          The user (role) state.
                         • present ←

NOTES                   *postgresql_user-notes*

   Note

     • The module creates a user (role) with login privilege by default. Use NOLOGIN role_attr_flags to change this behaviour.
     • If you specify PUBLIC as the user (role), then the privilege changes will apply to all users (roles). You may not specify password or role_attr_flags when the PUBLIC user is specified.
     • The default authentication assumes that you are either logging in as or sudo’ing to the postgres account on the host.
     • To avoid “Peer authentication failed for user postgres” error, use postgres user as a become_user.
     • This module uses psycopg2, a Python PostgreSQL database adapter. You must ensure that psycopg2 is installed on the host before using this module.
     • If the remote host is the PostgreSQL server (which is the default case), then PostgreSQL must also be installed on the remote host.
     • For Ubuntu-based systems, install the postgresql, libpq-dev, and python-psycopg2 packages on the remote host before using this module.
     • The ca_cert parameter requires at least Postgres version 8.4 and psycopg2 version 2.4.3.

SEE ALSO                   *postgresql_user-see also*

   See also

   postgresql_privs – Grant or revoke privileges on PostgreSQL database objects
   The official documentation on the postgresql_privs module.

   postgresql_membership – Add or remove PostgreSQL roles from groups
   The official documentation on the postgresql_membership module.

   postgresql_owner – Change an owner of PostgreSQL database object
   The official documentation on the postgresql_owner module.

   PostgreSQL database roles
   Complete reference of the PostgreSQL database roles documentation.

EXAMPLES                   *postgresql_user-examples*

 - name: Connect to acme database, create django user, and grant access to database and products table
   postgresql_user:
     db: acme
     name: django
     password: ceec4eif7ya
     priv: "CONNECT/products:ALL"
     expires: "Jan 31 2020"

 # Connect to default database, create rails user, set its password (MD5-hashed),
 # and grant privilege to create other databases and demote rails from super user status if user exists
 - name: Create rails user, set MD5-hashed password, grant privs
   postgresql_user:
     name: rails
     password: md59543f1d82624df2b31672ec0f7050460
     role_attr_flags: CREATEDB,NOSUPERUSER

 - name: Connect to acme database and remove test user privileges from there
   postgresql_user:
     db: acme
     name: test
     priv: "ALL/products:ALL"
     state: absent
     fail_on_user: no

 - name: Connect to test database, remove test user from cluster
   postgresql_user:
     db: test
     name: test
     priv: ALL
     state: absent

 - name: Connect to acme database and set user's password with no expire date
   postgresql_user:
     db: acme
     name: django
     password: mysupersecretword
     priv: "CONNECT/products:ALL"
     expires: infinity

 # Example privileges string format
 # INSERT,UPDATE/table:SELECT/anothertable:ALL

 - name: Connect to test database and remove an existing user's password
   postgresql_user:
     db: test
     user: test
     password: ""

 - name: Create user test and grant group user_ro and user_rw to it
   postgresql_user:
     name: test
     groups:
     - user_ro
     - user_rw

RETURN VALUES                   *postgresql_user-return values*

   Common return values are documented here, the following are the fields unique to this module:

       Key      Returned                                                                                 Description
   queries               List of executed queries.
   list         always   Sample:
   added in 2.8          ['CREATE USER "alice"', 'GRANT CONNECT ON DATABASE "acme" TO "alice"']

STATUS                   *postgresql_user-status*

     • This module is guaranteed to have backward compatible interface changes going forward. [stableinterface]
     • This module is maintained by the Ansible Community. [community]

     • Ansible Core Team

   Hint

   If you notice any issues in this documentation, you can edit this document to improve it.

   ══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

MORE INFO                          *postgresql_user-moreinfo*
>
All arguments are omni-completed, but if you really want to see the online docs:
https://docs.ansible.com/ansible/latest/modules/postgresql_user_module.html
