SYNOPSIS                   *rax*

     • creates / deletes a Rackspace Public Cloud instance and optionally waits for it to be ‘running’.

REQUIREMENTS                   *rax-requirements*

   The below requirements are needed on the host that executes this module.

     • python >= 2.6
     • pyrax

PARAMETERS                   *rax-parameters*

         Parameter                      Choices/Defaults                                                                           Comments
   api_key                                                               Rackspace API key, overrides credentials.
   -                                                                     aliases: password
   auth_endpoint         Default:                                        The URI of the authentication service.
   -                     "https://identity.api.rackspacecloud.com/v2.0/"
   auto_increment          Choices:                                      Whether or not to increment a single number with the name of the created servers. Only applicable when used with the group
   boolean                 • no                                          attribute or meta key.
                           • yes ←
   boot_from_volume        Choices:                                      Whether or not to boot the instance from a Cloud Block Storage volume. If yes and image is specified a new volume will be
   boolean                 • no ←                                        created at boot time. boot_volume_size is required with image to create a new volume at boot time.
                           • yes
   boot_volume                                                           Cloud Block Storage ID or Name to use as the boot volume of the instance
   -
   boot_volume_size      Default:                                        Size of the volume to create in Gigabytes. This is only required with image and boot_from_volume.
   -                     100
   boot_volume_terminate   Choices:
   boolean                 • no ←                                        Whether the boot_volume or newly created volume from image will be terminated when the server is terminated
                           • yes
   config_drive            Choices:
   boolean                 • no ←                                        Attach read-only configuration drive to server as label config-2
                           • yes
   count                 Default:                                        number of instances to launch
   -                     1
   count_offset          Default:                                        number count to start at
   -                     1
   credentials                                                           File to find the Rackspace credentials in. Ignored if api_key and username are provided.
   -                                                                     aliases: creds_file
   disk_config             Choices:
   -                       • auto ←                                      Disk partitioning strategy
                           • manual
   env                                                                   Environment as configured in ~/.pyrax.cfg, see
   -                                                                     https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#pyrax-configuration.
   exact_count             Choices:                                      Explicitly ensure an exact count of instances, used with state=active/present. If specified as yes and count is less than
   boolean                 • no ←                                        the servers matched, servers will be deleted to match the count. If the number of matched servers is fewer than specified in
                           • yes                                         count additional servers will be added.
   extra_client_args                                                     A hash of key/value pairs to be used when creating the cloudservers client. This is considered an advanced option, use it
   -                                                                     wisely and with caution.
   extra_create_args                                                     A hash of key/value pairs to be used when creating a new server. This is considered an advanced option, use it wisely and
   -                                                                     with caution.
   files                                                                 Files to insert into the instance. remotefilename:localcontent
   -
   flavor                                                                flavor to use for the instance
   -
   group                                                                 host group to assign to server, is also used for idempotent operations to ensure a specific number of instances
   -
   identity_type         Default:                                        Authentication mechanism to use, such as rackspace or keystone.
   -                     "rackspace"
   image                                                                 image to use for the instance. Can be an id, human_id or name. With boot_from_volume, a Cloud Block Storage volume will be
   -                                                                     created with this image
   instance_ids                                                          list of instance ids, currently only used when state='absent' to remove instances
   -
   key_name                                                              key pair to use on the instance
   -                                                                     aliases: keypair
   meta                                                                  A hash of metadata to associate with the instance
   -
   name                                                                  Name to give the instance
   -
   networks              Default:                                        The network to attach to the instances. If specified, you must include ALL networks including the public and private
   -                     ["public", "private"]                           interfaces. Can be id or label.
   region                Default:                                        Region to create an instance in.
   -                     "DFW"
   state                   Choices:
   -                       • present ←                                   Indicate desired state of the resource
                           • absent
   tenant_id                                                             The tenant ID used for authentication.
   -
   tenant_name                                                           The tenant name used for authentication.
   -
   user_data                                                             Data to be uploaded to the servers config drive. This option implies config_drive. Can be a file path or a string
   -
   username                                                              Rackspace username, overrides credentials.
   -
   validate_certs          Choices:                                      Whether or not to require SSL validation of API endpoints.
   boolean                 • no                                          aliases: verify_ssl
                           • yes
   wait                    Choices:
   boolean                 • no ←                                        wait for the instance to be in state 'running' before returning
                           • yes
   wait_timeout          Default:                                        how long before wait gives up, in seconds
   -                     300

NOTES                   *rax-notes*

   Note

     • exact_count can be “destructive” if the number of running servers in the group is larger than that specified in count. In such a case, the state is effectively set to absent and the extra
       servers are deleted. In the case of deletion, the returned data structure will have action set to delete, and the oldest servers in the group will be deleted.
     • The following environment variables can be used, RAX_USERNAME, RAX_API_KEY, RAX_CREDS_FILE, RAX_CREDENTIALS, RAX_REGION.
     • RAX_CREDENTIALS and RAX_CREDS_FILE points to a credentials file appropriate for pyrax. See https://github.com/rackspace/pyrax/blob/master/docs/getting_started.md#authenticating
     • RAX_USERNAME and RAX_API_KEY obviate the use of a credentials file
     • RAX_REGION defines a Rackspace Public Cloud region (DFW, ORD, LON, …)

EXAMPLES                   *rax-examples*

 - name: Build a Cloud Server
   gather_facts: False
   tasks:
     - name: Server build request
       local_action:
         module: rax
         credentials: ~/.raxpub
         name: rax-test1
         flavor: 5
         image: b11d9567-e412-4255-96b9-bd63ab23bcfe
         key_name: my_rackspace_key
         files:
           /root/test.txt: /home/localuser/test.txt
         wait: yes
         state: present
         networks:
           - private
           - public
       register: rax

 - name: Build an exact count of cloud servers with incremented names
   hosts: local
   gather_facts: False
   tasks:
     - name: Server build requests
       local_action:
         module: rax
         credentials: ~/.raxpub
         name: test%03d.example.org
         flavor: performance1-1
         image: ubuntu-1204-lts-precise-pangolin
         state: present
         count: 10
         count_offset: 10
         exact_count: yes
         group: test
         wait: yes
       register: rax

STATUS                   *rax-status*

     • This module is not guaranteed to have a backwards compatible interface. [preview]
     • This module is maintained by the Ansible Community. [community]

     • Jesse Keating (@omgjlk)
     • Matt Martz (@sivel)

   Hint

   If you notice any issues in this documentation, you can edit this document to improve it.

   ══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

MORE INFO                          *rax-moreinfo*
>
All arguments are omni-completed, but if you really want to see the online docs:
https://docs.ansible.com/ansible/latest/modules/rax_module.html
