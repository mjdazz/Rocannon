SYNOPSIS                   *bigiq_regkey_pool*

     • Manages registration key (regkey) pools on a BIG-IQ. These pools function as a container in-which you will add lists of registration keys. To add registration keys, use the
       bigiq_regkey_license module.

REQUIREMENTS                   *bigiq_regkey_pool-requirements*

   The below requirements are needed on the host that executes this module.

     • BIG-IQ >= 5.3.0

PARAMETERS                   *bigiq_regkey_pool-parameters*

      Parameter    Choices/Defaults                                                                             Comments
   description                      A description to attach to the pool.
   string
   name                             Specifies the name of the registration key pool.
   string /                         You must be mindful to name your registration pools unique names. While BIG-IQ does not require this, this module does. If you do not do this, the behavior of
   required                         the module is undefined and you may end up putting licenses in the wrong registration key pool.
   provider
   dictionary                       A dict object containing connection details.
   added in 2.5
    auth_provider                   Configures the auth provider for to obtain authentication tokens from the remote device.
    string                          This option is really used when working with BIG-IQ devices.
    password                        The password for the user account used to connect to the BIG-IP.
    string /                        You may omit this option by setting the environment variable F5_PASSWORD.
    required                        aliases: pass, pwd
    server                          The BIG-IP host.
    string /                        You may omit this option by setting the environment variable F5_SERVER.
    required
    server_port    Default:         The BIG-IP server port.
    integer        443              You may omit this option by setting the environment variable F5_SERVER_PORT.
    ssh_keyfile                     Specifies the SSH keyfile to use to authenticate the connection to the remote device. This argument is only used for cli transports.
    path                            You may omit this option by setting the environment variable ANSIBLE_NET_SSH_KEYFILE.
    timeout                         Specifies the timeout in seconds for communicating with the network device for either connecting or sending commands. If the timeout is exceeded before the
    integer                         operation is completed, the module will error.
    transport        Choices:
    string           • cli          Configures the transport connection to use when connecting to the remote device.
                     • rest ←
    user                            The username to connect to the BIG-IP with. This user must have administrative privileges on the device.
    string /                        You may omit this option by setting the environment variable F5_USER.
    required
    validate_certs   Choices:       If no, SSL certificates are not validated. Use this only on personally controlled sites using self-signed certificates.
    boolean          • no           You may omit this option by setting the environment variable F5_VALIDATE_CERTS.
                     • yes ←
   state             Choices:       The state of the regkey pool on the system.
   string            • absent       When present, guarantees that the pool exists.
                     • present ←    When absent, removes the pool, and the licenses it contains, from the system.

NOTES                   *bigiq_regkey_pool-notes*

   Note

     • For more information on using Ansible to manage F5 Networks devices see https://www.ansible.com/integrations/networks/f5.
     • Requires BIG-IP software version >= 12.
     • The F5 modules only manipulate the running configuration of the F5 product. To ensure that BIG-IP specific configuration persists to disk, be sure to include at least one task that uses the
       bigip_config module to save the running configuration. Refer to the module’s documentation for the correct usage of the module to save your running configuration.

EXAMPLES                   *bigiq_regkey_pool-examples*

 - name: Create a registration key (regkey) pool to hold individual device licenses
   bigiq_regkey_pool:
     name: foo-pool
     state: present
     provider:
       user: admin
       password: secret
       server: lb.mydomain.com
   delegate_to: localhost

RETURN VALUES                   *bigiq_regkey_pool-return values*

   Common return values are documented here, the following are the fields unique to this module:

       Key     Returned                                                                                  Description
   description          New description of the regkey pool.
   string      changed  Sample:
                        My description

STATUS                   *bigiq_regkey_pool-status*

     • This module is not guaranteed to have a backwards compatible interface. [preview]
     • This module is maintained by an Ansible Partner. [certified]

     • Tim Rupp (@caphrim007)

   Hint

   If you notice any issues in this documentation, you can edit this document to improve it.

   ══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

MORE INFO                          *bigiq_regkey_pool-moreinfo*
>
All arguments are omni-completed, but if you really want to see the online docs:
https://docs.ansible.com/ansible/latest/modules/bigiq_regkey_pool_module.html
