SYNOPSIS                   *k8s_info*

     • Use the OpenShift Python client to perform read operations on K8s objects.
     • Access to the full range of K8s APIs.
     • Authenticate using either a config file, certificates, password or token.
     • Supports check mode.
     • This module was called k8s_facts before Ansible 2.9. The usage did not change.

   Aliases: k8s_facts

REQUIREMENTS                   *k8s_info-requirements*

   The below requirements are needed on the host that executes this module.

     • python >= 2.7
     • openshift >= 0.6
     • PyYAML >= 3.11

PARAMETERS                   *k8s_info-parameters*

      Parameter    Choices/Defaults                                                                             Comments
   api_key                          Token used to authenticate with the API. Can also be specified via K8S_AUTH_API_KEY environment variable.
   string
   api_version     Default:         Use to specify the API version. in conjunction with kind, name, and namespace to identify a specific object.
   -               "v1"             aliases: api, version
   ca_cert                          Path to a CA certificate used to authenticate with the API. The full certificate chain must be provided to avoid certificate validation errors. Can also be
   path                             specified via K8S_AUTH_SSL_CA_CERT environment variable.
                                    aliases: ssl_ca_cert
   client_cert                      Path to a certificate used to authenticate with the API. Can also be specified via K8S_AUTH_CERT_FILE environment variable.
   path                             aliases: cert_file
   client_key                       Path to a key file used to authenticate with the API. Can also be specified via K8S_AUTH_KEY_FILE environment variable.
   path                             aliases: key_file
   context                          The name of a context found in the config file. Can also be specified via K8S_AUTH_CONTEXT environment variable.
   string
   field_selectors                  List of field selectors to use to filter results
   -
   host                             Provide a URL for accessing the API. Can also be specified via K8S_AUTH_HOST environment variable.
   string
   kind                             Use to specify an object model. Use in conjunction with api_version, name, and namespace to identify a specific object.
   - / required
   kubeconfig                       Path to an existing Kubernetes config file. If not provided, and no other connection options are provided, the openshift client will attempt to load the default
   path                             configuration file from ~/.kube/config.json. Can also be specified via K8S_AUTH_KUBECONFIG environment variable.
   label_selectors                  List of label selectors to use to filter results
   -
   name                             Use to specify an object name. Use in conjunction with api_version, kind and namespace to identify a specific object.
   -
   namespace                        Use to specify an object namespace. Use in conjunction with api_version, kind, and name to identify a specific object.
   -
   password                         Provide a password for authenticating with the API. Can also be specified via K8S_AUTH_PASSWORD environment variable.
   string                           Please read the description of the username option for a discussion of when this option is applicable.
   proxy                            The URL of an HTTP proxy to use for the connection. Can also be specified via K8S_AUTH_PROXY environment variable.
   -                                Please note that this module does not pick up typical proxy settings from the environment (e.g. HTTP_PROXY).
   added in 2.9
   username                         Provide a username for authenticating with the API. Can also be specified via K8S_AUTH_USERNAME environment variable.
   string                           Please note that this only works with clusters configured to use HTTP Basic Auth. If your cluster has a different form of authentication (e.g. OAuth2 in
                                    OpenShift), this option will not work as expected and you should look into the k8s_auth module, as that might do what you need.
   validate_certs    Choices:       Whether or not to verify the API server's SSL certificates. Can also be specified via K8S_AUTH_VERIFY_SSL environment variable.
   boolean           • no           aliases: verify_ssl
                     • yes

NOTES                   *k8s_info-notes*

   Note

     • The OpenShift Python client wraps the K8s Python client, providing full access to all of the APIS and models available on both platforms. For API version details and additional information
       visit https://github.com/openshift/openshift-restclient-python
     • To avoid SSL certificate validation errors when validate_certs is True, the full certificate chain for the API server must be provided via ca_cert or in the kubeconfig file.

EXAMPLES                   *k8s_info-examples*

 - name: Get an existing Service object
   k8s_info:
     api_version: v1
     kind: Service
     name: web
     namespace: testing
   register: web_service

 - name: Get a list of all service objects
   k8s_info:
     api_version: v1
     kind: Service
     namespace: testing
   register: service_list

 - name: Get a list of all pods from any namespace
   k8s_info:
     kind: Pod
   register: pod_list

 - name: Search for all Pods labelled app=web
   k8s_info:
     kind: Pod
     label_selectors:
       - app = web
       - tier in (dev, test)

 - name: Search for all running pods
   k8s_info:
     kind: Pod
     field_selectors:
       - status.phase=Running

RETURN VALUES                   *k8s_info-return values*

   Common return values are documented here, the following are the fields unique to this module:

        Key      Returned                                                                                 Description
   resources     success  The object(s) that exists
   complex
     api_version success  The versioned schema of this representation of an object.
     string
     kind        success  Represents the REST resource this object represents.
     string
     metadata    success  Standard object metadata. Includes name, namespace, annotations, labels, etc.
     dictionary
     spec        success  Specific attributes of the object. Will vary based on the api_version and kind.
     dictionary
     status      success  Current status details for the object.
     dictionary

STATUS                   *k8s_info-status*

     • This module is not guaranteed to have a backwards compatible interface. [preview]
     • This module is maintained by the Ansible Community. [community]

     • Will Thames (@willthames)

   Hint

   If you notice any issues in this documentation, you can edit this document to improve it.

   ══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

MORE INFO                          *k8s_info-moreinfo*
>
All arguments are omni-completed, but if you really want to see the online docs:
https://docs.ansible.com/ansible/latest/modules/k8s_info_module.html
