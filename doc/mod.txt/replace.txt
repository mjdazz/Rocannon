SYNOPSIS                   *replace*

     • This module will replace all instances of a pattern within a file.
     • It is up to the user to maintain idempotence by ensuring that the same pattern would never match any replacements made.

PARAMETERS                   *replace-parameters*

     Parameter   Choices/Defaults                                                                              Comments
   after                          If specified, only content after this match will be replaced/removed.
   string                         Can be used in combination with before.
   added in 2.4                   Uses Python regular expressions; see http://docs.python.org/2/library/re.html.
                                  Uses DOTALL, which means the . special character can match newlines.
                                  The attributes the resulting file or directory should have.
   attributes                     To get supported flags look at the man page for chattr on the target system.
   string                         This string should contain the attributes in the same order as the one displayed by lsattr.
                                  The = operator is assumed as default, otherwise + or - operators need to be included in the string.
                                  aliases: attr
   backup          Choices:
   boolean         • no ←         Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.
                   • yes
   before                         If specified, only content before this match will be replaced/removed.
   string                         Can be used in combination with after.
   added in 2.4                   Uses Python regular expressions; see http://docs.python.org/2/library/re.html.
                                  Uses DOTALL, which means the . special character can match newlines.
   encoding      Default:
   string        "utf-8"          The character encoding for reading and writing the file.
   added in 2.4
   group                          Name of the group that should own the file/directory, as would be fed to chown.
   string
                                  The permissions the resulting file or directory should have.
                                  For those used to /usr/bin/chmod remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an
   mode                           octal number (like 0644 or 01777) or quote it (like '644' or '1777') so Ansible receives a string and can do its own conversion from string into number.
   string                         Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.
                                  As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, u+rwx or u=rw,g=r,o=r).
                                  As of Ansible 2.6, the mode may also be the special string preserve.
                                  When set to preserve the file will be given the same permissions as the source file.
   others                         All arguments accepted by the file module also work here.
   string
   owner                          Name of the user that should own the file/directory, as would be fed to chown.
   string
   path                           The file to modify.
   path /                         Before Ansible 2.3 this option was only usable as dest, destfile and name.
   required                       aliases: dest, destfile, name
                                  The regular expression to look for in the contents of the file.
                                  Uses Python regular expressions; see http://docs.python.org/2/library/re.html.
   regexp                         Uses MULTILINE mode, which means ^ and $ match the beginning and end of the file, as well as the beginning and end respectively of each line of the file.
   string /                       Does not use DOTALL, which means the . special character matches any character except newlines. A common mistake is to assume that a negated character set like
   required                       [^#] will also not match newlines.
                                  In order to exclude newlines, they must be added to the set like [^#\n].
                                  Note that, as of Ansible 2.0, short form tasks should have any escape sequences backslash-escaped in order to prevent them being parsed as string literal escapes.
                                  See the examples.
                                  The string to replace regexp matches.
   replace                        May contain backreferences that will get expanded with the regexp capture groups if the regexp matches.
   string                         If not set, matches are removed entirely.
                                  Backreferences can be used ambiguously like \1, or explicitly like \g<1>.
   selevel       Default:         The level part of the SELinux file context.
   string        "s0"             This is the MLS/MCS attribute, sometimes known as the range.
                                  When set to _default, it will use the level portion of the policy if available.
   serole                         The role part of the SELinux file context.
   string                         When set to _default, it will use the role portion of the policy if available.
   setype                         The type part of the SELinux file context.
   string                         When set to _default, it will use the type portion of the policy if available.
   seuser                         The user part of the SELinux file context.
   string                         By default it uses the system policy, where applicable.
                                  When set to _default, it will use the user portion of the policy if available.
                                  Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target file.
                                  By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target files, but sometimes systems are configured or just
   unsafe_writes   Choices:       broken in ways that prevent this. One example is docker mounted files, which cannot be updated atomically from inside the container and can only be written in an
   boolean         • no ←         unsafe manner.
                   • yes          This option allows Ansible to fall back to unsafe methods of updating files when atomic operations fail (however, it doesn't force Ansible to perform unsafe
                                  writes).
                                  IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption.
   validate                       The validation command to run before copying into place.
   string                         The path to the file to validate is passed in via '%s' which must be present as in the examples below.
                                  The command is passed securely so shell features like expansion and pipes will not work.

NOTES                   *replace-notes*

   Note

     • As of Ansible 2.3, the dest option has been changed to path as default, but dest still works as well.
     • As of Ansible 2.7.10, the combined use of before and after works properly. If you were relying on the previous incorrect behavior, you may be need to adjust your tasks. See
       https://github.com/ansible/ansible/issues/31354 for details.
     • Option follow has been removed in Ansible 2.5, because this module modifies the contents of the file so follow=no doesn’t make sense.

EXAMPLES                   *replace-examples*

 - name: Before Ansible 2.3, option 'dest', 'destfile' or 'name' was used instead of 'path'
   replace:
     path: /etc/hosts
     regexp: '(\s+)old\.host\.name(\s+.")?$'
     replace: '\1new.host.name\2'

 - name: Replace after the expression till the end of the file (requires Ansible >= 2.4)
   replace:
     path: /etc/apache2/sites-available/default.conf
     after: 'NameVirtualHost ["]'
     regexp: '^(.+)$'
     replace: '# \1'

 - name: Replace before the expression till the begin of the file (requires Ansible >= 2.4)
   replace:
     path: /etc/apache2/sites-available/default.conf
     before: '# live site config'
     regexp: '^(.+)$'
     replace: '# \1'

 # Prior to Ansible 2.7.10, using before and after in combination did the opposite of what was intended.
 # see https://github.com/ansible/ansible/issues/31354 for details.
 - name: Replace between the expressions (requires Ansible >= 2.4)
   replace:
     path: /etc/hosts
     after: '<VirtualHost ["]>'
     before: '</VirtualHost>'
     regexp: '^(.+)$'
     replace: '# \1'

 - name: Supports common file attributes
   replace:
     path: /home/jdoe/.ssh/known_hosts
     regexp: '^old\.host\.name[^\n]"\n'
     owner: jdoe
     group: jdoe
     mode: '0644'

 - name: Supports a validate command
   replace:
     path: /etc/apache/ports
     regexp: '^(NameVirtualHost|Listen)\s+80\s"$'
     replace: '\1 127.0.0.1:8080'
     validate: '/usr/sbin/apache2ctl -f %s -t'

 - name: Short form task (in ansible 2+) necessitates backslash-escaped sequences
   replace: path=/etc/hosts regexp='\\b(localhost)(\\d")\\b' replace='\\1\\2.localdomain\\2 \\1\\2'

 - name: Long form task does not
   replace:
     path: /etc/hosts
     regexp: '\b(localhost)(\d")\b'
     replace: '\1\2.localdomain\2 \1\2'

 - name: Explicitly specifying positional matched groups in replacement
   replace:
     path: /etc/ssh/sshd_config
     regexp: '^(ListenAddress[ ]+)[^\n]+$'
     replace: '\g<1>0.0.0.0'

 - name: Explicitly specifying named matched groups
   replace:
     path: /etc/ssh/sshd_config
     regexp: '^(?P<dctv>ListenAddress[ ]+)(?P<host>[^\n]+)$'
     replace: '#\g<dctv>\g<host>\n\g<dctv>0.0.0.0'

STATUS                   *replace-status*

     • This module is guaranteed to have backward compatible interface changes going forward. [stableinterface]
     • This module is maintained by the Ansible Community. [community]

     • Evan Kaufman (@EvanK)

   Hint

   If you notice any issues in this documentation, you can edit this document to improve it.

   ══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

MORE INFO                          *replace-moreinfo*
>
All arguments are omni-completed, but if you really want to see the online docs:
https://docs.ansible.com/ansible/latest/modules/replace_module.html
