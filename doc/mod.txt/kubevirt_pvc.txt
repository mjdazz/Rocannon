SYNOPSIS                   *kubevirt_pvc*

     • Use Openshift Python SDK to manage PVCs on Kubernetes
     • Support Containerized Data Importer out of the box

REQUIREMENTS                   *kubevirt_pvc-requirements*

   The below requirements are needed on the host that executes this module.

     • python >= 2.7
     • openshift >= 0.8.2

PARAMETERS                   *kubevirt_pvc-parameters*

        Parameter       Choices/Defaults                                                                            Comments
   access_modes                            Contains the desired access modes the volume should have.
   list                                    More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
   annotations                             Annotations attached to this object.
   dictionary                              https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
   api_key                                 Token used to authenticate with the API. Can also be specified via K8S_AUTH_API_KEY environment variable.
   string
   ca_cert                                 Path to a CA certificate used to authenticate with the API. The full certificate chain must be provided to avoid certificate validation errors. Can also
   path                                    be specified via K8S_AUTH_SSL_CA_CERT environment variable.
                                           aliases: ssl_ca_cert
                                           If data is to be copied onto the PVC using the Containerized Data Importer you can specify the source of the data (along with any additional
                                           configuration) as well as it's format.
   cdi_source                              Valid source types are: blank, http, s3, registry, pvc and upload. The last one requires using the kubevirt_cdi_upload module to actually perform an
   dictionary                              upload.
                                           Source data format is specified using the optional content_type. Valid options are kubevirt (default; raw image) and archive (tar.gz).
                                           This uses the DataVolume source syntax: https://github.com/kubevirt/containerized-data-importer/blob/master/doc/datavolumes.md#https3registry-source
   client_cert                             Path to a certificate used to authenticate with the API. Can also be specified via K8S_AUTH_CERT_FILE environment variable.
   path                                    aliases: cert_file
   client_key                              Path to a key file used to authenticate with the API. Can also be specified via K8S_AUTH_KEY_FILE environment variable.
   path                                    aliases: key_file
   context                                 The name of a context found in the config file. Can also be specified via K8S_AUTH_CONTEXT environment variable.
   string
   force                 Choices:
   boolean               • no ←            If set to True, and state is present, an existing object will be replaced.
                         • yes
   host                                    Provide a URL for accessing the API. Can also be specified via K8S_AUTH_HOST environment variable.
   string
   kubeconfig                              Path to an existing Kubernetes config file. If not provided, and no other connection options are provided, the openshift client will attempt to load the
   path                                    default configuration file from ~/.kube/config.json. Can also be specified via K8S_AUTH_KUBECONFIG environment variable.
   labels                                  Labels attached to this object.
   dictionary                              https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
                         Choices:          Whether to override the default patch merge approach with a specific type.
   merge_type            • json            This defaults to ['strategic-merge', 'merge'], which is ideal for using the same parameters on resource kinds that combine Custom Resources and built-in
   list                  • merge           resources.
                         • strategic-merge See https://kubernetes.io/docs/tasks/run-application/update-api-object-kubectl-patch/#use-a-json-merge-patch-to-update-a-deployment
                                           If more than one merge_type is given, the merge_types will be tried in order
   name                                    Use to specify a PVC object name.
   string / required
   namespace                               Use to specify a PVC object namespace.
   string / required
   password                                Provide a password for authenticating with the API. Can also be specified via K8S_AUTH_PASSWORD environment variable.
   string                                  Please read the description of the username option for a discussion of when this option is applicable.
   proxy                                   The URL of an HTTP proxy to use for the connection. Can also be specified via K8S_AUTH_PROXY environment variable.
   -                                       Please note that this module does not pick up typical proxy settings from the environment (e.g. HTTP_PROXY).
   added in 2.9
                                           A partial YAML definition of the PVC object being created/updated. Here you can define Kubernetes PVC Resource parameters not covered by this module's
   resource_definition                     parameters.
   dictionary                              NOTE: resource_definition has lower priority than module parameters. If you try to define e.g. metadata.namespace here, that value will be ignored and
                                           namespace used instead.
                                           aliases: definition, inline
   selector                                A label query over volumes to consider for binding.
   dictionary                              https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
   size                                    How much storage to allocate to the PVC.
   string                                  aliases: storage
   state                 Choices:          Determines if an object should be created, patched, or deleted. When set to present, an object will be created, if it does not already exist. If set to
   -                     • present ←       absent, an existing object will be deleted. If set to present, an existing object will be patched, if its attributes differ from those specified using
                         • absent          module options and resource_definition.
   storage_class_name                      Name of the StorageClass required by the claim.
   string                                  More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
   username                                Provide a username for authenticating with the API. Can also be specified via K8S_AUTH_USERNAME environment variable.
   string                                  Please note that this only works with clusters configured to use HTTP Basic Auth. If your cluster has a different form of authentication (e.g. OAuth2 in
                                           OpenShift), this option will not work as expected and you should look into the k8s_auth module, as that might do what you need.
   validate_certs        Choices:          Whether or not to verify the API server's SSL certificates. Can also be specified via K8S_AUTH_VERIFY_SSL environment variable.
   boolean               • no              aliases: verify_ssl
                         • yes
   volume_mode                             This defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is an alpha feature of
   string                                  kubernetes and may change in the future.
   volume_name                             This is the binding reference to the PersistentVolume backing this claim.
   string
   wait                  Choices:          If set, this module will wait for the PVC to become bound and CDI (if enabled) to finish its operation before returning.
   boolean               • no ←            Used only if state set to present.
                         • yes             Unless used in conjunction with cdi_source, this might result in a timeout, as clusters may be configured to not bind PVCs until first usage.
   wait_timeout        Default:            Specifies how much time in seconds to wait for PVC creation to complete if wait option is enabled.
   integer             300                 Default value is reasonably high due to an expectation that CDI might take a while to finish its operation.

NOTES                   *kubevirt_pvc-notes*

   Note

     • The OpenShift Python client wraps the K8s Python client, providing full access to all of the APIS and models available on both platforms. For API version details and additional information
       visit https://github.com/openshift/openshift-restclient-python
     • To avoid SSL certificate validation errors when validate_certs is True, the full certificate chain for the API server must be provided via ca_cert or in the kubeconfig file.

EXAMPLES                   *kubevirt_pvc-examples*

 - name: Create a PVC and import data from an external source
   kubevirt_pvc:
     name: pvc1
     namespace: default
     size: 100Mi
     access_modes:
       - ReadWriteOnce
     cdi_source:
       http:
         url: https://www.source.example/path/of/data/vm.img
       # If the URL points to a tar.gz containing the disk image, uncomment the line below:
       #content_type: archive

 - name: Create a PVC as a clone from a different PVC
   kubevirt_pvc:
     name: pvc2
     namespace: default
     size: 100Mi
     access_modes:
       - ReadWriteOnce
     cdi_source:
       pvc:
         namespace: source-ns
         name: source-pvc

 - name: Create a PVC ready for data upload
   kubevirt_pvc:
     name: pvc3
     namespace: default
     size: 100Mi
     access_modes:
       - ReadWriteOnce
     cdi_source:
       upload: yes
     # You need the kubevirt_cdi_upload module to actually upload something

 - name: Create a PVC with a blank raw image
   kubevirt_pvc:
     name: pvc4
     namespace: default
     size: 100Mi
     access_modes:
       - ReadWriteOnce
     cdi_source:
       blank: yes

 - name: Create a PVC and fill it with data from a container
   kubevirt_pvc:
     name: pvc5
     namespace: default
     size: 100Mi
     access_modes:
       - ReadWriteOnce
     cdi_source:
       registry:
         url: "docker://kubevirt/fedora-cloud-registry-disk-demo"

RETURN VALUES                   *kubevirt_pvc-return values*

   Common return values are documented here, the following are the fields unique to this module:

        Key                              Returned                                                                                 Description
   result        success                                                  The created, patched, or otherwise present object. Will be empty in the case of a deletion.
   complex
     api_version success                                                  The versioned schema of this representation of an object.
     string
     duration                                                             elapsed time of task in seconds
     integer     when wait is true                                        Sample:
                                                                          48
     items       when resource_definition or src contains list of objects Returned only when multiple yaml documents are passed to src or resource_definition
     list
     kind        success                                                  Represents the REST resource this object represents.
     string
     metadata    success                                                  Standard object metadata. Includes name, namespace, annotations, labels, etc.
     complex
     spec        success                                                  Specific attributes of the object. Will vary based on the api_version and kind.
     complex
     status      success                                                  Current status details for the object.
     complex

STATUS                   *kubevirt_pvc-status*

     • This module is not guaranteed to have a backwards compatible interface. [preview]
     • This module is maintained by the Ansible Community. [community]

     • KubeVirt Team (@kubevirt)

   Hint

   If you notice any issues in this documentation, you can edit this document to improve it.

   ══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

MORE INFO                          *kubevirt_pvc-moreinfo*
>
All arguments are omni-completed, but if you really want to see the online docs:
https://docs.ansible.com/ansible/latest/modules/kubevirt_pvc_module.html
