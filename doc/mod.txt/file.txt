SYNOPSIS                   *file*

     • Set attributes of files, symlinks or directories.
     • Alternatively, remove files, symlinks or directories.
     • Many other modules support the same options as the file module - including copy, template, and assemble.
     • For Windows targets, use the win_file module instead.

PARAMETERS                   *file-parameters*

          Parameter         Choices/Defaults                                                                         Comments
   access_time                               This parameter indicates the time the file's access time should be set to.
   string                                    Should be preserve when no modification is required, YYYYMMDDHHMM.SS when using default time format, or now.
   added in 2.7                              Default is None meaning that preserve is the default for state=[file,directory,link,hard] and now is default for state=touch.
   access_time_format       Default:         When used with access_time, indicates the time format that must be used.
   string                   "%Y%m%d%H%M.%S"  Based on default Python format (see time.strftime doc).
   added in 2.7
                                             The attributes the resulting file or directory should have.
   attributes                                To get supported flags look at the man page for chattr on the target system.
   string                                    This string should contain the attributes in the same order as the one displayed by lsattr.
                                             The = operator is assumed as default, otherwise + or - operators need to be included in the string.
                                             aliases: attr
   follow                     Choices:       This flag indicates that filesystem links, if they exist, should be followed.
   boolean                    • no           Previous to Ansible 2.5, this was no by default.
                              • yes ←
   force                      Choices:       Force the creation of the symlinks in two cases: the source file does not exist (but will appear later); the destination exists and is a file (so, we
   boolean                    • no ←         need to unlink the path file and create symlink to the src file in place of it).
                              • yes
   group                                     Name of the group that should own the file/directory, as would be fed to chown.
   string
                                             The permissions the resulting file or directory should have.
                                             For those used to /usr/bin/chmod remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows
                                             it is an octal number (like 0644 or 01777) or quote it (like '644' or '1777') so Ansible receives a string and can do its own conversion from string
   mode                                      into number.
   string                                    Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results.
                                             As of Ansible 1.8, the mode may be specified as a symbolic mode (for example, u+rwx or u=rw,g=r,o=r).
                                             As of Ansible 2.6, the mode may also be the special string preserve.
                                             When set to preserve the file will be given the same permissions as the source file.
   modification_time                         This parameter indicates the time the file's modification time should be set to.
   string                                    Should be preserve when no modification is required, YYYYMMDDHHMM.SS when using default time format, or now.
   added in 2.7                              Default is None meaning that preserve is the default for state=[file,directory,link,hard] and now is default for state=touch.
   modification_time_format Default:         When used with modification_time, indicates the time format that must be used.
   string                   "%Y%m%d%H%M.%S"  Based on default Python format (see time.strftime doc).
   added in 2.7
   owner                                     Name of the user that should own the file/directory, as would be fed to chown.
   string
   path                                      Path to the file being managed.
   path / required                           aliases: dest, name
   recurse                    Choices:       Recursively set the specified file attributes on directory contents.
   boolean                    • no ←         This applies only when state is set to directory.
                              • yes
   selevel                  Default:         The level part of the SELinux file context.
   string                   "s0"             This is the MLS/MCS attribute, sometimes known as the range.
                                             When set to _default, it will use the level portion of the policy if available.
   serole                                    The role part of the SELinux file context.
   string                                    When set to _default, it will use the role portion of the policy if available.
   setype                                    The type part of the SELinux file context.
   string                                    When set to _default, it will use the type portion of the policy if available.
   seuser                                    The user part of the SELinux file context.
   string                                    By default it uses the system policy, where applicable.
                                             When set to _default, it will use the user portion of the policy if available.
                                             Path of the file to link to.
   src                                       This applies only to state=link and state=hard.
   path                                      For state=link, this will also accept a non-existing path.
                                             Relative paths are relative to the file being created (path) which is how the Unix command ln -s SRC DEST treats relative paths.
                                             If absent, directories will be recursively deleted, and files or symlinks will be unlinked. In the case of a directory, if diff is declared, you will
                                             see the files and folders deleted listed under path_contents. Note that absent will not cause file to fail if the path does not exist as the state did
                              Choices:       not change.
                              • absent       If directory, all intermediate subdirectories will be created if they do not exist. Since Ansible 1.7 they will be created with the supplied
   state                      • directory    permissions.
   string                     • file ←       If file, without any other options this works mostly as a 'stat' and will return the current state of path. Even with other options (i.e mode), the file
                              • hard         will be modified but will NOT be created if it does not exist; see the touch value or the copy or template module if you want that behavior.
                              • link         If hard, the hard link will be created or changed.
                              • touch        If link, the symbolic link will be created or changed.
                                             If touch (new in 1.4), an empty file will be created if the path does not exist, while an existing file or directory will receive updated file access
                                             and modification times (similar to the way touch works from the command line).
                                             Influence when to use atomic operation to prevent data corruption or inconsistent reads from the target file.
                                             By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target files, but sometimes systems are
   unsafe_writes              Choices:       configured or just broken in ways that prevent this. One example is docker mounted files, which cannot be updated atomically from inside the container
   boolean                    • no ←         and can only be written in an unsafe manner.
                              • yes          This option allows Ansible to fall back to unsafe methods of updating files when atomic operations fail (however, it doesn't force Ansible to perform
                                             unsafe writes).
                                             IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption.

SEE ALSO                   *file-see also*

   See also

   assemble – Assemble configuration files from fragments
   The official documentation on the assemble module.

   copy – Copy files to remote locations
   The official documentation on the copy module.

   stat – Retrieve file or file system status
   The official documentation on the stat module.

   template – Template a file out to a remote server
   The official documentation on the template module.

   win_file – Creates, touches or removes files or directories
   The official documentation on the win_file module.

EXAMPLES                   *file-examples*

 - name: Change file ownership, group and permissions
   file:
     path: /etc/foo.conf
     owner: foo
     group: foo
     mode: '0644'

 - name: Give insecure permissions to an existing file
   file:
     path: /work
     owner: root
     group: root
     mode: '1777'

 - name: Create a symbolic link
   file:
     src: /file/to/link/to
     dest: /path/to/symlink
     owner: foo
     group: foo
     state: link

 - name: Create two hard links
   file:
     src: '/tmp/{{ item.src }}'
     dest: '{{ item.dest }}'
     state: hard
   loop:
     - { src: x, dest: y }
     - { src: z, dest: k }

 - name: Touch a file, using symbolic modes to set the permissions (equivalent to 0644)
   file:
     path: /etc/foo.conf
     state: touch
     mode: u=rw,g=r,o=r

 - name: Touch the same file, but add/remove some permissions
   file:
     path: /etc/foo.conf
     state: touch
     mode: u+rw,g-wx,o-rwx

 - name: Touch again the same file, but dont change times this makes the task idempotent
   file:
     path: /etc/foo.conf
     state: touch
     mode: u+rw,g-wx,o-rwx
     modification_time: preserve
     access_time: preserve

 - name: Create a directory if it does not exist
   file:
     path: /etc/some_directory
     state: directory
     mode: '0755'

 - name: Update modification and access time of given file
   file:
     path: /etc/some_file
     state: file
     modification_time: now
     access_time: now

 - name: Set access time based on seconds from epoch value
   file:
     path: /etc/another_file
     state: file
     access_time: '{{ "%Y%m%d%H%M.%S" | strftime(stat_var.stat.atime) }}'

 - name: Recursively change ownership of a directory
   file:
     path: /etc/foo
     state: directory
     recurse: yes
     owner: foo
     group: foo

 - name: Remove file (delete file)
   file:
     path: /etc/foo.txt
     state: absent

 - name: Recursively remove directory
   file:
     path: /etc/foo
     state: absent

STATUS                   *file-status*

     • This module is guaranteed to have backward compatible interface changes going forward. [stableinterface]
     • This module is maintained by the Ansible Core Team. [core]

RED HAT SUPPORT                   *file-red hat support*

     • Ansible Core Team
     • Michael DeHaan

   Hint

   If you notice any issues in this documentation, you can edit this document to improve it.

   ══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

MORE INFO                          *file-moreinfo*
>
All arguments are omni-completed, but if you really want to see the online docs:
https://docs.ansible.com/ansible/latest/modules/file_module.html
